/* The following code was generated by JFlex 1.4.1 on 06.4.24 16:55 */

package sem2;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 06.4.24 16:55 from the specification file
 * <tt>Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 24, 28,  0, 24, 24,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    24,  0,  0,  0,  0,  0,  0, 47, 25, 27, 26, 55, 50, 54, 33, 57, 
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 48, 46, 53, 49, 51,  0, 
     0,  1,  2,  3,  4,  5,  6,  7,  8, 45, 10, 11, 12, 13, 14, 15, 
    16, 10, 17, 18, 19, 20, 21, 22, 10, 23, 10, 52,  0, 56, 58, 10, 
     0,  1, 42,  3,  4, 35,  6,  7,  8,  9, 10, 11, 44, 41, 38, 43, 
    16, 10, 34, 39, 36, 37, 21, 22, 10, 40, 10, 29, 31, 30,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\24\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\1\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\6\2"+
    "\1\25\6\2\1\26\1\27\3\2\1\30\1\31\5\2"+
    "\1\32\5\2\2\0\1\33\2\0\1\34\1\0\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\4\2\1\43\2\2"+
    "\1\44\1\2\1\45\3\2\1\46\5\2\1\47\3\2"+
    "\1\50\2\2\2\0\2\51\2\2\1\52\2\2\1\53"+
    "\1\54\1\2\1\55\7\2\1\56\1\57\2\2\1\60"+
    "\1\33\1\61\1\62\1\63\2\2\1\64\6\2\1\65"+
    "\1\66\1\67\2\2\1\70\2\2\1\71\1\72\3\2"+
    "\1\73\1\74\3\2\1\75\11\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\4\0\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\73\0\u0512"+
    "\0\73\0\73\0\u054d\0\u0588\0\u05c3\0\73\0\u05fe\0\u0639"+
    "\0\73\0\73\0\u0674\0\73\0\u06af\0\u06ea\0\73\0\73"+
    "\0\73\0\73\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c"+
    "\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0213"+
    "\0\u0213\0\u0a24\0\u0a5f\0\u0a9a\0\u0213\0\u0213\0\u0ad5\0\u0b10"+
    "\0\u0b4b\0\u0b86\0\u0bc1\0\u0213\0\u0bfc\0\u0c37\0\u0c72\0\u0cad"+
    "\0\u0ce8\0\u0d23\0\u054d\0\u054d\0\u0d5e\0\u0d99\0\73\0\u05fe"+
    "\0\73\0\73\0\73\0\73\0\73\0\u0213\0\u0dd4\0\u0e0f"+
    "\0\u0e4a\0\u0e85\0\u0213\0\u0ec0\0\u0efb\0\u0213\0\u0f36\0\u0213"+
    "\0\u0f71\0\u0fac\0\u0fe7\0\u0213\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u0213\0\u1149\0\u1184\0\u11bf\0\u0213\0\u11fa\0\u1235"+
    "\0\u1270\0\u12ab\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u0213\0\u1397"+
    "\0\u13d2\0\u0213\0\u0213\0\u140d\0\u0213\0\u1448\0\u1483\0\u14be"+
    "\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u0213\0\u0213\0\u15e5\0\u1620"+
    "\0\u0213\0\u0d23\0\u0213\0\u0213\0\u0213\0\u165b\0\u1696\0\u0213"+
    "\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u0213\0\u0213"+
    "\0\u0213\0\u1833\0\u186e\0\u0213\0\u18a9\0\u18e4\0\u0213\0\u0213"+
    "\0\u191f\0\u195a\0\u1995\0\u0213\0\u0213\0\u19d0\0\u1a0b\0\u1a46"+
    "\0\u0213\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3"+
    "\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb"+
    "\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\12\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\12\1\27"+
    "\1\30\1\31\1\32\1\27\1\33\2\2\1\34\1\35"+
    "\1\21\1\7\1\23\1\24\1\16\1\22\1\12\1\15"+
    "\1\4\1\17\1\14\1\13\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\74\0\15\12\1\53\2\12\1\54\6\12\10\0"+
    "\1\12\1\0\1\54\3\12\1\53\7\12\16\0\4\12"+
    "\1\55\22\12\10\0\1\12\1\0\1\12\1\55\12\12"+
    "\16\0\1\56\15\12\1\57\10\12\10\0\1\12\1\0"+
    "\11\12\1\57\2\12\16\0\10\12\1\60\5\12\1\61"+
    "\10\12\10\0\1\12\1\0\11\12\1\61\1\12\1\60"+
    "\16\0\13\12\1\62\1\12\1\63\11\12\10\0\1\12"+
    "\1\0\4\12\1\63\5\12\1\62\1\12\16\0\10\12"+
    "\1\64\5\12\1\65\4\12\1\66\3\12\10\0\1\12"+
    "\1\0\3\12\1\66\5\12\1\65\1\12\1\64\16\0"+
    "\16\12\1\67\10\12\10\0\1\12\1\0\11\12\1\67"+
    "\2\12\16\0\27\12\10\0\1\12\1\0\14\12\16\0"+
    "\5\12\1\70\7\12\1\71\11\12\10\0\1\12\1\0"+
    "\4\12\1\71\7\12\16\0\1\72\26\12\10\0\1\12"+
    "\1\0\14\12\16\0\16\12\1\73\10\12\10\0\1\12"+
    "\1\0\11\12\1\73\2\12\16\0\10\12\1\74\16\12"+
    "\10\0\1\12\1\0\13\12\1\74\16\0\5\12\1\75"+
    "\12\12\1\76\6\12\10\0\1\12\1\0\1\76\13\12"+
    "\16\0\1\77\17\12\1\100\6\12\10\0\1\12\1\0"+
    "\1\100\13\12\16\0\4\12\1\101\22\12\10\0\1\12"+
    "\1\0\1\12\1\101\12\12\16\0\4\12\1\102\22\12"+
    "\10\0\1\12\1\0\1\12\1\102\12\12\16\0\7\12"+
    "\1\103\6\12\1\104\7\12\1\105\10\0\1\12\1\0"+
    "\6\12\1\105\2\12\1\104\2\12\16\0\15\12\1\106"+
    "\11\12\10\0\1\12\1\0\4\12\1\106\7\12\16\0"+
    "\1\107\26\12\10\0\1\12\1\0\14\12\16\0\7\12"+
    "\1\110\1\111\16\12\10\0\1\12\1\0\13\12\1\111"+
    "\47\0\1\112\40\0\36\113\1\114\34\113\5\0\1\115"+
    "\32\0\1\34\1\116\1\0\1\115\70\0\1\117\31\0"+
    "\57\120\1\121\13\120\61\0\1\122\72\0\1\123\72\0"+
    "\1\124\1\0\1\125\72\0\1\52\10\0\3\12\1\126"+
    "\23\12\10\0\1\12\1\0\14\12\16\0\20\12\1\127"+
    "\6\12\10\0\1\12\1\0\1\127\13\12\16\0\6\12"+
    "\1\130\20\12\10\0\1\12\1\0\14\12\16\0\21\12"+
    "\1\131\5\12\10\0\1\12\1\0\5\12\1\131\6\12"+
    "\16\0\15\12\1\132\11\12\10\0\1\12\1\0\4\12"+
    "\1\132\7\12\16\0\24\12\1\133\2\12\10\0\1\12"+
    "\1\0\14\12\16\0\25\12\1\134\1\12\10\0\1\12"+
    "\1\0\14\12\16\0\21\12\1\135\5\12\10\0\1\12"+
    "\1\0\5\12\1\135\6\12\16\0\3\12\1\136\23\12"+
    "\10\0\1\12\1\0\14\12\16\0\13\12\1\137\13\12"+
    "\10\0\1\12\1\0\12\12\1\137\1\12\16\0\20\12"+
    "\1\140\6\12\10\0\1\12\1\0\1\140\13\12\16\0"+
    "\15\12\1\141\11\12\10\0\1\12\1\0\4\12\1\141"+
    "\7\12\16\0\22\12\1\142\4\12\10\0\1\12\1\0"+
    "\2\12\1\142\11\12\16\0\1\12\1\143\25\12\10\0"+
    "\1\12\1\0\10\12\1\143\3\12\16\0\3\12\1\144"+
    "\23\12\10\0\1\12\1\0\14\12\16\0\13\12\1\145"+
    "\13\12\10\0\1\12\1\0\12\12\1\145\1\12\16\0"+
    "\2\12\1\146\24\12\10\0\1\12\1\0\14\12\16\0"+
    "\16\12\1\147\10\12\10\0\1\12\1\0\11\12\1\147"+
    "\2\12\16\0\2\12\1\150\14\12\1\151\7\12\10\0"+
    "\1\12\1\0\14\12\16\0\22\12\1\152\4\12\10\0"+
    "\1\12\1\0\2\12\1\152\11\12\16\0\4\12\1\153"+
    "\22\12\10\0\1\12\1\0\1\12\1\153\12\12\16\0"+
    "\17\12\1\154\7\12\10\0\1\12\1\0\14\12\16\0"+
    "\22\12\1\155\4\12\10\0\1\12\1\0\2\12\1\155"+
    "\11\12\16\0\20\12\1\156\6\12\10\0\1\12\1\0"+
    "\1\156\13\12\16\0\10\12\1\157\16\12\10\0\1\12"+
    "\1\0\13\12\1\157\16\0\22\12\1\160\4\12\10\0"+
    "\1\12\1\0\2\12\1\160\11\12\15\0\32\112\1\161"+
    "\40\112\37\0\1\162\1\163\25\0\2\162\43\0\1\164"+
    "\33\0\1\165\26\12\10\0\1\12\1\0\14\12\16\0"+
    "\10\12\1\166\16\12\10\0\1\12\1\0\13\12\1\166"+
    "\16\0\4\12\1\167\22\12\10\0\1\12\1\0\1\12"+
    "\1\167\12\12\16\0\21\12\1\170\5\12\10\0\1\12"+
    "\1\0\5\12\1\170\6\12\16\0\15\12\1\171\11\12"+
    "\10\0\1\12\1\0\4\12\1\171\7\12\16\0\4\12"+
    "\1\172\22\12\10\0\1\12\1\0\1\12\1\172\12\12"+
    "\16\0\4\12\1\173\22\12\10\0\1\12\1\0\1\12"+
    "\1\173\12\12\16\0\2\12\1\174\24\12\10\0\1\12"+
    "\1\0\14\12\16\0\16\12\1\175\10\12\10\0\1\12"+
    "\1\0\11\12\1\175\2\12\16\0\4\12\1\176\22\12"+
    "\10\0\1\12\1\0\1\12\1\176\12\12\16\0\27\12"+
    "\10\0\1\12\1\0\1\177\13\12\16\0\12\12\1\200"+
    "\14\12\10\0\1\12\1\0\14\12\16\0\2\12\1\201"+
    "\3\12\1\202\20\12\10\0\1\12\1\0\14\12\16\0"+
    "\16\12\1\203\10\12\10\0\1\12\1\0\11\12\1\203"+
    "\2\12\16\0\4\12\1\204\22\12\10\0\1\12\1\0"+
    "\1\12\1\204\12\12\16\0\15\12\1\205\11\12\10\0"+
    "\1\12\1\0\4\12\1\205\7\12\16\0\4\12\1\206"+
    "\22\12\10\0\1\12\1\0\1\12\1\206\12\12\16\0"+
    "\10\12\1\207\16\12\10\0\1\12\1\0\13\12\1\207"+
    "\16\0\13\12\1\210\13\12\10\0\1\12\1\0\12\12"+
    "\1\210\1\12\16\0\7\12\1\211\17\12\10\0\1\12"+
    "\1\0\14\12\15\0\32\112\1\161\1\212\37\112\40\0"+
    "\1\163\37\0\1\115\32\0\1\164\2\0\1\115\30\0"+
    "\26\12\1\213\10\0\1\12\1\0\6\12\1\213\5\12"+
    "\16\0\15\12\1\214\11\12\10\0\1\12\1\0\4\12"+
    "\1\214\7\12\16\0\22\12\1\215\4\12\10\0\1\12"+
    "\1\0\2\12\1\215\11\12\16\0\22\12\1\216\4\12"+
    "\10\0\1\12\1\0\2\12\1\216\11\12\16\0\22\12"+
    "\1\217\4\12\10\0\1\12\1\0\2\12\1\217\11\12"+
    "\16\0\13\12\1\220\13\12\10\0\1\12\1\0\12\12"+
    "\1\220\1\12\16\0\27\12\10\0\1\12\1\0\1\12"+
    "\1\221\12\12\16\0\4\12\1\222\22\12\10\0\1\12"+
    "\1\0\1\12\1\222\12\12\16\0\4\12\1\223\22\12"+
    "\10\0\1\12\1\0\1\12\1\223\12\12\16\0\20\12"+
    "\1\224\6\12\10\0\1\12\1\0\1\224\13\12\16\0"+
    "\20\12\1\225\6\12\10\0\1\12\1\0\1\225\13\12"+
    "\16\0\1\226\26\12\10\0\1\12\1\0\14\12\16\0"+
    "\13\12\1\227\13\12\10\0\1\12\1\0\12\12\1\227"+
    "\1\12\16\0\4\12\1\230\22\12\10\0\1\12\1\0"+
    "\1\12\1\230\12\12\16\0\16\12\1\231\10\12\10\0"+
    "\1\12\1\0\11\12\1\231\2\12\16\0\10\12\1\232"+
    "\16\12\10\0\1\12\1\0\13\12\1\232\16\0\27\12"+
    "\10\0\1\12\1\0\2\12\1\233\11\12\16\0\3\12"+
    "\1\234\23\12\10\0\1\12\1\0\14\12\16\0\3\12"+
    "\1\235\23\12\10\0\1\12\1\0\14\12\16\0\1\236"+
    "\26\12\10\0\1\12\1\0\14\12\16\0\3\12\1\237"+
    "\23\12\10\0\1\12\1\0\14\12\16\0\22\12\1\240"+
    "\4\12\10\0\1\12\1\0\2\12\1\240\11\12\16\0"+
    "\16\12\1\241\10\12\10\0\1\12\1\0\11\12\1\241"+
    "\2\12\16\0\27\12\10\0\1\12\1\0\3\12\1\242"+
    "\10\12\16\0\23\12\1\243\3\12\10\0\1\12\1\0"+
    "\3\12\1\243\10\12\16\0\14\12\1\244\12\12\10\0"+
    "\1\12\1\0\7\12\1\244\4\12\16\0\15\12\1\245"+
    "\11\12\10\0\1\12\1\0\4\12\1\245\7\12\16\0"+
    "\27\12\10\0\1\12\1\0\1\246\13\12\16\0\20\12"+
    "\1\247\6\12\10\0\1\12\1\0\1\247\13\12\16\0"+
    "\27\12\10\0\1\12\1\0\4\12\1\250\7\12\16\0"+
    "\4\12\1\251\22\12\10\0\1\12\1\0\1\12\1\251"+
    "\12\12\16\0\27\12\10\0\1\12\1\0\5\12\1\252"+
    "\6\12\16\0\27\12\10\0\1\12\1\0\6\12\1\253"+
    "\5\12\16\0\27\12\10\0\1\12\1\0\7\12\1\254"+
    "\4\12\16\0\27\12\10\0\1\12\1\0\10\12\1\255"+
    "\3\12\16\0\27\12\10\0\1\12\1\0\11\12\1\256"+
    "\2\12\16\0\27\12\10\0\1\12\1\0\12\12\1\257"+
    "\1\12\16\0\27\12\10\0\1\12\1\0\5\12\1\260"+
    "\6\12\16\0\27\12\10\0\1\12\1\0\6\12\1\261"+
    "\5\12\16\0\27\12\10\0\1\12\1\0\7\12\1\262"+
    "\4\12\15\0\1\263\27\264\4\263\1\0\3\263\1\264"+
    "\1\263\14\264\15\263\16\0\1\265\55\0\15\12\1\266"+
    "\11\12\10\0\1\12\1\0\14\12\72\0\1\267\16\0"+
    "\27\12\10\0\1\12\1\0\13\12\1\270\31\0\1\271"+
    "\57\0\13\12\1\272\13\12\10\0\1\12\1\0\14\12"+
    "\73\0\1\273\15\0\27\12\10\0\1\12\1\0\14\12"+
    "\1\273\52\0\1\274\52\0\1\275\27\0\1\275\43\0"+
    "\1\276\33\0\1\276\42\0\1\277\20\0\1\277\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8024];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\1\11\1\1\2\11\3\1\1\11"+
    "\2\1\2\11\1\1\1\11\2\1\4\11\37\1\2\0"+
    "\1\1\2\0\1\11\1\0\5\11\33\1\2\0\100\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public String filename = "";

  private Symbol symbol(int type) {
    return new Symbol(type, new TSymbol(new TPosition(yyline+1, yycolumn+1, yychar+1), 
                               new TPosition(yyline+1, yycolumn+1+yylength(), yychar+1+yylength()),
                               yytext(), type, ""));
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, new TSymbol(new TPosition(yyline+1, yycolumn+1, yychar+1), 
                               new TPosition(yyline+1, yycolumn+1+yylength(), yychar+1+yylength()),
                               yytext(), type, "", value));
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { return symbol(sym.OF);
          }
        case 63: break;
        case 26: 
          { return symbol(sym.TO);
          }
        case 64: break;
        case 6: 
          { return symbol(sym.RPAREN);
          }
        case 65: break;
        case 33: 
          { return symbol(sym.NOTEQUAL);
          }
        case 66: break;
        case 13: 
          { return symbol(sym.GT);
          }
        case 67: break;
        case 36: 
          { return symbol(sym.END);
          }
        case 68: break;
        case 52: 
          { return symbol(sym.LABEL);
          }
        case 69: break;
        case 15: 
          { return symbol(sym.LT);
          }
        case 70: break;
        case 20: 
          { return symbol(sym.UPARROW);
          }
        case 71: break;
        case 3: 
          { /* ignore white space. */
          }
        case 72: break;
        case 62: 
          { return symbol(sym.NOT);
          }
        case 73: break;
        case 50: 
          { return symbol(sym.BEGIN);
          }
        case 74: break;
        case 34: 
          { return symbol(sym.AND);
          }
        case 75: break;
        case 35: 
          { return symbol(sym.DIV);
          }
        case 76: break;
        case 19: 
          { return symbol(sym.SLASH);
          }
        case 77: break;
        case 57: 
          { return symbol(sym.RECORD);
          }
        case 78: break;
        case 17: 
          { return symbol(sym.PLUS);
          }
        case 79: break;
        case 1: 
          { String s;
    System.err.println("Lexer error - invalid character: "+yytext()+" - line: "+(yyline+1)+" column: "+(yycolumn+1)); 
    s = Report.getLine(filename, yyline+1);
    System.err.println(s);
    System.err.println(Report.markerString(s, yycolumn+1, '^'));
    System.exit(20);
          }
        case 80: break;
        case 38: 
          { return symbol(sym.MOD);
          }
        case 81: break;
        case 49: 
          { return symbol(sym.ARRAY);
          }
        case 82: break;
        case 55: 
          { return symbol(sym.DOWNTO);
          }
        case 83: break;
        case 47: 
          { return symbol(sym.TYPE);
          }
        case 84: break;
        case 29: 
          { return symbol(sym.STRING, new String(yytext().substring(1, yylength()-2)));
          }
        case 85: break;
        case 42: 
          { return symbol(sym.CASE);
          }
        case 86: break;
        case 21: 
          { return symbol(sym.DO);
          }
        case 87: break;
        case 43: 
          { return symbol(sym.ELSE);
          }
        case 88: break;
        case 10: 
          { return symbol(sym.COLON);
          }
        case 89: break;
        case 41: 
          { return symbol(sym.UNUMBER, new Double(yytext()));
          }
        case 90: break;
        case 46: 
          { return symbol(sym.THEN);
          }
        case 91: break;
        case 40: 
          { return symbol(sym.VAR);
          }
        case 92: break;
        case 54: 
          { return symbol(sym.WHILE);
          }
        case 93: break;
        case 11: 
          { return symbol(sym.EQUAL);
          }
        case 94: break;
        case 61: 
          { return symbol(sym.PROCEDURE);
          }
        case 95: break;
        case 22: 
          { return symbol(sym.IF);
          }
        case 96: break;
        case 4: 
          { return symbol(sym.LPAREN);
          }
        case 97: break;
        case 53: 
          { return symbol(sym.UNTIL);
          }
        case 98: break;
        case 5: 
          { return symbol(sym.STAR);
          }
        case 99: break;
        case 25: 
          { return symbol(sym.OR);
          }
        case 100: break;
        case 23: 
          { return symbol(sym.IN);
          }
        case 101: break;
        case 7: 
          { return symbol(sym.UINT, new Integer(yytext()));
          }
        case 102: break;
        case 48: 
          { return symbol(sym.WITH);
          }
        case 103: break;
        case 37: 
          { return symbol(sym.FOR);
          }
        case 104: break;
        case 9: 
          { return symbol(sym.SEMICOLON);
          }
        case 105: break;
        case 14: 
          { return symbol(sym.LBRAC);
          }
        case 106: break;
        case 18: 
          { return symbol(sym.RBRAC);
          }
        case 107: break;
        case 30: 
          { return symbol(sym.ASSIGNMENT);
          }
        case 108: break;
        case 16: 
          { return symbol(sym.MINUS);
          }
        case 109: break;
        case 39: 
          { return symbol(sym.SET);
          }
        case 110: break;
        case 2: 
          { return symbol(sym.IDENTIFIER, new String(yytext()));
          }
        case 111: break;
        case 31: 
          { return symbol(sym.GE);
          }
        case 112: break;
        case 60: 
          { return symbol(sym.FUNCTION);
          }
        case 113: break;
        case 51: 
          { return symbol(sym.CONST);
          }
        case 114: break;
        case 12: 
          { return symbol(sym.COMMA);
          }
        case 115: break;
        case 32: 
          { return symbol(sym.LE);
          }
        case 116: break;
        case 27: 
          { /* ignore comments. */
          }
        case 117: break;
        case 45: 
          { return symbol(sym.GOTO);
          }
        case 118: break;
        case 44: 
          { return symbol(sym.FILE);
          }
        case 119: break;
        case 56: 
          { return symbol(sym.PACKED);
          }
        case 120: break;
        case 58: 
          { return symbol(sym.REPEAT);
          }
        case 121: break;
        case 8: 
          { return symbol(sym.DOT);
          }
        case 122: break;
        case 59: 
          { return symbol(sym.PROGRAM);
          }
        case 123: break;
        case 28: 
          { return symbol(sym.DOTDOT);
          }
        case 124: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
