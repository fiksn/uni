
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060330
// Mon Apr 24 16:55:03 CEST 2006
//----------------------------------------------------

package sem2;

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060330 generated parser.
  * @version Mon Apr 24 16:55:03 CEST 2006
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\356\000\002\002\004\000\002\002\005\000\002\003" +
    "\010\000\002\003\007\000\002\003\003\000\002\004\005" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\005\010\000\002\005\003\000\002\006\005\000\002" +
    "\006\003\000\002\006\002\000\002\014\005\000\002\014" +
    "\003\000\002\014\003\000\002\015\003\000\002\007\004" +
    "\000\002\007\002\000\002\016\004\000\002\016\003\000" +
    "\002\017\006\000\002\010\004\000\002\010\002\000\002" +
    "\020\004\000\002\020\003\000\002\021\006\000\002\022" +
    "\003\000\002\022\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\024\003\000\002\024\003\000" +
    "\002\027\005\000\002\030\005\000\002\030\003\000\002" +
    "\025\003\000\002\025\004\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\031\010" +
    "\000\002\031\007\000\002\031\010\000\002\031\007\000" +
    "\002\041\005\000\002\041\003\000\002\041\004\000\002" +
    "\041\005\000\002\036\003\000\002\037\003\000\002\037" +
    "\003\000\002\035\003\000\002\032\005\000\002\032\007" +
    "\000\002\032\005\000\002\042\005\000\002\042\003\000" +
    "\002\044\005\000\002\043\007\000\002\043\006\000\002" +
    "\043\005\000\002\043\003\000\002\043\002\000\002\045" +
    "\005\000\002\045\003\000\002\046\005\000\002\046\003" +
    "\000\002\047\007\000\002\047\011\000\002\047\007\000" +
    "\002\050\005\000\002\050\003\000\002\051\003\000\002" +
    "\051\005\000\002\033\005\000\002\033\004\000\002\052" +
    "\003\000\002\034\005\000\002\034\004\000\002\026\004" +
    "\000\002\026\004\000\002\011\005\000\002\011\005\000" +
    "\002\011\002\000\002\053\005\000\002\053\003\000\002" +
    "\054\005\000\002\012\004\000\002\012\002\000\002\055" +
    "\005\000\002\055\003\000\002\056\003\000\002\056\003" +
    "\000\002\057\005\000\002\061\004\000\002\061\005\000" +
    "\002\063\005\000\002\064\005\000\002\064\003\000\002" +
    "\065\003\000\002\065\003\000\002\066\005\000\002\067" +
    "\006\000\002\060\005\000\002\062\006\000\002\062\007" +
    "\000\002\013\003\000\002\070\005\000\002\071\005\000" +
    "\002\071\003\000\002\071\004\000\002\072\003\000\002" +
    "\072\003\000\002\073\005\000\002\073\003\000\002\074" +
    "\005\000\002\074\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\076\003\000\002\076\003\000\002\076\003\000\002" +
    "\076\003\000\002\076\003\000\002\076\002\000\002\075" +
    "\003\000\002\075\003\000\002\075\003\000\002\075\003" +
    "\000\002\103\006\000\002\112\006\000\002\112\005\000" +
    "\002\106\006\000\002\106\004\000\002\114\003\000\002" +
    "\114\003\000\002\114\003\000\002\113\012\000\002\113" +
    "\012\000\002\113\011\000\002\113\005\000\002\107\012" +
    "\000\002\107\012\000\002\107\004\000\002\110\006\000" +
    "\002\110\005\000\002\104\006\000\002\104\004\000\002" +
    "\111\006\000\002\111\010\000\002\111\005\000\002\105" +
    "\010\000\002\105\004\000\002\077\005\000\002\077\005" +
    "\000\002\116\003\000\002\116\003\000\002\116\003\000" +
    "\002\116\004\000\002\117\006\000\002\121\005\000\002" +
    "\121\003\000\002\120\005\000\002\100\004\000\002\100" +
    "\003\000\002\122\005\000\002\123\005\000\002\123\003" +
    "\000\002\101\004\000\002\102\007\000\002\102\010\000" +
    "\002\124\005\000\002\124\003\000\002\125\005\000\002" +
    "\115\005\000\002\115\003\000\002\126\005\000\002\126" +
    "\004\000\002\127\005\000\002\127\003\000\002\130\005" +
    "\000\002\130\003\000\002\131\003\000\002\132\003\000" +
    "\002\132\005\000\002\132\004\000\002\132\005\000\002" +
    "\134\003\000\002\134\005\000\002\133\003\000\002\133" +
    "\004\000\002\135\003\000\002\135\005\000\002\136\005" +
    "\000\002\136\003\000\002\136\003\000\002\136\004\000" +
    "\002\136\003\000\002\136\004\000\002\136\005\000\002" +
    "\136\004\000\002\137\003\000\002\137\003\000\002\140" +
    "\003\000\002\140\003\000\002\140\003\000\002\141\003" +
    "\000\002\141\003\000\002\141\003\000\002\141\003\000" +
    "\002\141\003\000\002\142\003\000\002\142\003\000\002" +
    "\142\003\000\002\142\003\000\002\142\003\000\002\142" +
    "\003\000\002\142\003\000\002\143\003\000\002\143\003" +
    "\000\002\143\003\000\002\143\003\000\002\144\004\000" +
    "\002\144\004\000\002\144\003\000\002\144\004\000\002" +
    "\144\003\000\002\144\003\000\002\144\003\000\002\145" +
    "\003\000\002\145\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\006\003\005\034\007\001\002\000\004\002" +
    "\u0185\001\002\000\022\003\ufffd\006\ufffd\010\ufffd\020\ufffd" +
    "\024\ufffd\033\ufffd\042\ufffd\044\ufffd\001\002\000\022\003" +
    "\023\006\ufff4\010\ufff4\020\ufff4\024\022\033\ufff4\042\ufff4" +
    "\044\ufff4\001\002\000\004\077\010\001\002\000\004\061" +
    "\011\001\002\000\006\003\012\077\014\001\002\000\012" +
    "\050\ufff9\051\ufff9\067\ufff9\077\021\001\002\000\006\051" +
    "\015\067\016\001\002\000\010\050\ufffb\051\ufffb\067\ufffb" +
    "\001\002\000\004\077\020\001\002\000\024\003\ufffe\006" +
    "\ufffe\010\ufffe\020\ufffe\024\ufffe\033\ufffe\042\ufffe\044\ufffe" +
    "\070\017\001\002\000\022\003\uffff\006\uffff\010\uffff\020" +
    "\uffff\024\uffff\033\uffff\042\uffff\044\uffff\001\002\000\010" +
    "\050\ufffc\051\ufffc\067\ufffc\001\002\000\010\050\ufffa\051" +
    "\ufffa\067\ufffa\001\002\000\006\003\u0180\074\271\001\002" +
    "\000\024\002\ufff7\006\ufff5\010\ufff5\020\ufff5\033\ufff5\042" +
    "\ufff5\044\ufff5\052\ufff7\070\ufff7\001\002\000\016\006\uffee" +
    "\010\030\020\uffee\033\uffee\042\uffee\044\uffee\001\002\000" +
    "\006\002\uff14\052\027\001\002\000\004\002\000\001\002" +
    "\000\004\002\uff15\001\002\000\004\077\u0178\001\002\000" +
    "\014\006\uffe9\020\uffe9\033\uffe9\042\033\044\uffe9\001\002" +
    "\000\012\006\uffaa\020\uffaa\033\uffaa\044\217\001\002\000" +
    "\004\077\036\001\002\000\014\006\uffe7\020\uffe7\033\uffe7" +
    "\044\uffe7\077\uffe7\001\002\000\014\006\uffea\020\uffea\033" +
    "\uffea\044\uffea\077\036\001\002\000\004\054\037\001\002" +
    "\000\036\003\064\005\070\016\043\032\046\035\062\037" +
    "\060\061\052\063\063\065\040\073\054\074\066\075\057" +
    "\076\055\077\047\001\002\000\024\003\uff31\026\uff31\027" +
    "\uff31\057\uff31\061\uff31\074\uff31\075\uff31\076\uff31\077\uff31" +
    "\001\002\000\004\053\214\001\002\000\012\003\uffd6\015" +
    "\uffd6\067\uffd6\070\uffd6\001\002\000\006\003\211\030\212" +
    "\001\002\000\012\003\uffe1\015\uffe1\067\uffe1\070\uffe1\001" +
    "\002\000\020\003\uffe0\015\uffe0\030\uffe0\051\uffe0\066\uffe0" +
    "\067\uffe0\070\uffe0\001\002\000\012\005\070\016\043\035" +
    "\062\037\060\001\002\000\014\003\uffe5\015\uffe5\053\uff17" +
    "\067\uffe5\070\uffe5\001\002\000\012\003\uffe2\015\uffe2\067" +
    "\uffe2\070\uffe2\001\002\000\012\003\uffe4\015\uffe4\067\uffe4" +
    "\070\uffe4\001\002\000\006\003\012\077\014\001\002\000" +
    "\012\003\uffd8\015\uffd8\067\uffd8\070\uffd8\001\002\000\006" +
    "\003\204\077\205\001\002\000\024\003\uff16\015\uff16\030" +
    "\uff16\050\uff16\051\uff16\053\uff16\066\uff16\067\uff16\070\uff16" +
    "\001\002\000\020\003\uffdf\015\uffdf\030\uffdf\051\uffdf\066" +
    "\uffdf\067\uffdf\070\uffdf\001\002\000\024\003\uff1a\015\uff1a" +
    "\030\uff1a\050\uff1a\051\uff1a\053\uff1a\066\uff1a\067\uff1a\070" +
    "\uff1a\001\002\000\006\003\200\030\201\001\002\000\012" +
    "\003\uffe3\015\uffe3\067\uffe3\070\uffe3\001\002\000\012\003" +
    "\131\007\135\015\uffbf\077\014\001\002\000\024\003\uff30" +
    "\026\uff30\027\uff30\057\uff30\061\uff30\074\uff30\075\uff30\076" +
    "\uff30\077\uff30\001\002\000\020\003\uffdc\015\uffdc\030\uffdc" +
    "\051\uffdc\066\uffdc\067\uffdc\070\uffdc\001\002\000\004\070" +
    "\127\001\002\000\024\003\uff18\015\uff18\030\uff18\050\uff18" +
    "\051\uff18\053\uff18\066\uff18\067\uff18\070\uff18\001\002\000" +
    "\012\003\uffd9\015\uffd9\067\uffd9\070\uffd9\001\002\000\006" +
    "\003\100\057\077\001\002\000\010\074\076\075\074\077" +
    "\075\001\002\000\012\003\uffdb\015\uffdb\067\uffdb\070\uffdb" +
    "\001\002\000\012\003\uffd7\015\uffd7\067\uffd7\070\uffd7\001" +
    "\002\000\024\003\uff1b\015\uff1b\030\uff1b\050\uff1b\051\uff1b" +
    "\053\uff1b\066\uff1b\067\uff1b\070\uff1b\001\002\000\024\003" +
    "\uff1c\015\uff1c\030\uff1c\050\uff1c\051\uff1c\053\uff1c\066\uff1c" +
    "\067\uff1c\070\uff1c\001\002\000\024\003\uff19\015\uff19\030" +
    "\uff19\050\uff19\051\uff19\053\uff19\066\uff19\067\uff19\070\uff19" +
    "\001\002\000\024\003\064\051\102\061\052\063\063\065" +
    "\040\074\066\075\057\076\055\077\103\001\002\000\024" +
    "\003\064\051\102\061\052\063\063\065\040\074\066\075" +
    "\057\076\055\077\103\001\002\000\012\003\uffcd\030\uffcd" +
    "\051\uffcd\066\uffcd\001\002\000\004\003\117\001\002\000" +
    "\022\003\uffcb\015\uffcb\030\uffcb\051\uffcb\053\uff17\066\uffcb" +
    "\067\uffcb\070\uffcb\001\002\000\010\003\110\051\107\066" +
    "\111\001\002\000\012\003\uffd0\030\uffd0\051\uffd0\066\uffd0" +
    "\001\002\000\020\003\uffcc\015\uffcc\030\uffcc\051\uffcc\066" +
    "\uffcc\067\uffcc\070\uffcc\001\002\000\022\003\064\061\052" +
    "\063\063\065\040\074\066\075\057\076\055\077\103\001" +
    "\002\000\022\003\064\061\052\063\063\065\040\074\066" +
    "\075\057\076\055\077\103\001\002\000\004\030\112\001" +
    "\002\000\036\003\064\005\070\016\043\032\046\035\062" +
    "\037\060\061\052\063\063\065\040\073\054\074\066\075" +
    "\057\076\055\077\047\001\002\000\012\003\uffca\015\uffca" +
    "\067\uffca\070\uffca\001\002\000\012\003\uffd3\015\uffd3\067" +
    "\uffd3\070\uffd3\001\002\000\012\003\uffce\030\uffce\051\uffce" +
    "\066\uffce\001\002\000\012\003\uffd1\030\uffd1\051\uffd1\066" +
    "\uffd1\001\002\000\012\003\uffcf\030\uffcf\051\uffcf\066\uffcf" +
    "\001\002\000\012\003\110\030\122\051\107\066\121\001" +
    "\002\000\006\003\124\030\125\001\002\000\036\003\064" +
    "\005\070\016\043\032\046\035\062\037\060\061\052\063" +
    "\063\065\040\073\054\074\066\075\057\076\055\077\047" +
    "\001\002\000\012\003\uffd4\015\uffd4\067\uffd4\070\uffd4\001" +
    "\002\000\012\003\uffd2\015\uffd2\067\uffd2\070\uffd2\001\002" +
    "\000\036\003\064\005\070\016\043\032\046\035\062\037" +
    "\060\061\052\063\063\065\040\073\054\074\066\075\057" +
    "\076\055\077\047\001\002\000\012\003\uffd5\015\uffd5\067" +
    "\uffd5\070\uffd5\001\002\000\014\006\uffe6\020\uffe6\033\uffe6" +
    "\044\uffe6\077\uffe6\001\002\000\004\015\177\001\002\000" +
    "\014\015\uffc0\050\ufff9\051\ufff9\067\uffc0\077\021\001\002" +
    "\000\010\015\uffc5\067\uffc5\070\uffc5\001\002\000\006\050" +
    "\175\051\015\001\002\000\006\015\172\070\171\001\002" +
    "\000\004\077\137\001\002\000\004\030\142\001\002\000" +
    "\006\030\uffbd\050\140\001\002\000\004\077\141\001\002" +
    "\000\004\030\uffbe\001\002\000\022\015\uffc1\063\063\065" +
    "\040\067\uffc1\074\066\075\057\076\055\077\147\001\002" +
    "\000\006\050\156\051\155\001\002\000\010\015\uffbb\067" +
    "\uffbb\070\uffbb\001\002\000\010\015\uffc2\067\uffc2\070\153" +
    "\001\002\000\010\050\uffb5\051\uffb5\053\151\001\002\000" +
    "\024\003\uff17\015\uff17\030\uff17\050\uff17\051\uff17\053\uff17" +
    "\066\uff17\067\uff17\070\uff17\001\002\000\006\050\uffb6\051" +
    "\uffb6\001\002\000\016\063\063\065\040\074\066\075\057" +
    "\076\055\077\147\001\002\000\006\050\uffb4\051\uffb4\001" +
    "\002\000\022\015\uffc3\063\063\065\040\067\uffc3\074\066" +
    "\075\057\076\055\077\147\001\002\000\010\015\uffbc\067" +
    "\uffbc\070\uffbc\001\002\000\016\063\063\065\040\074\066" +
    "\075\057\076\055\077\147\001\002\000\004\061\157\001" +
    "\002\000\012\003\131\007\135\067\uffbf\077\014\001\002" +
    "\000\004\067\167\001\002\000\006\067\162\070\163\001" +
    "\002\000\010\015\uffba\067\uffba\070\uffba\001\002\000\012" +
    "\003\131\007\135\067\uffbf\077\014\001\002\000\004\067" +
    "\166\001\002\000\010\015\uffc6\067\uffc6\070\uffc6\001\002" +
    "\000\010\015\uffb9\067\uffb9\070\uffb9\001\002\000\010\015" +
    "\uffb8\067\uffb8\070\uffb8\001\002\000\006\050\uffb7\051\uffb7" +
    "\001\002\000\012\003\131\007\135\015\uffbf\077\014\001" +
    "\002\000\012\003\uffc9\015\uffc9\067\uffc9\070\uffc9\001\002" +
    "\000\004\015\174\001\002\000\012\003\uffc8\015\uffc8\067" +
    "\uffc8\070\uffc8\001\002\000\036\003\064\005\070\016\043" +
    "\032\046\035\062\037\060\061\052\063\063\065\040\073" +
    "\054\074\066\075\057\076\055\077\047\001\002\000\010" +
    "\015\uffc4\067\uffc4\070\uffc4\001\002\000\012\003\uffc7\015" +
    "\uffc7\067\uffc7\070\uffc7\001\002\000\012\003\uffb2\015\uffb2" +
    "\067\uffb2\070\uffb2\001\002\000\022\003\064\061\052\063" +
    "\063\065\040\074\066\075\057\076\055\077\103\001\002" +
    "\000\012\003\uffb1\015\uffb1\067\uffb1\070\uffb1\001\002\000" +
    "\012\003\uffb3\015\uffb3\067\uffb3\070\uffb3\001\002\000\012" +
    "\003\uffad\015\uffad\067\uffad\070\uffad\001\002\000\012\003" +
    "\uffae\015\uffae\067\uffae\070\uffae\001\002\000\006\051\015" +
    "\067\207\001\002\000\020\003\uffde\015\uffde\030\uffde\051" +
    "\uffde\066\uffde\067\uffde\070\uffde\001\002\000\012\003\uffda" +
    "\015\uffda\067\uffda\070\uffda\001\002\000\012\003\uffaf\015" +
    "\uffaf\067\uffaf\070\uffaf\001\002\000\036\003\064\005\070" +
    "\016\043\032\046\035\062\037\060\061\052\063\063\065" +
    "\040\073\054\074\066\075\057\076\055\077\047\001\002" +
    "\000\012\003\uffb0\015\uffb0\067\uffb0\070\uffb0\001\002\000" +
    "\016\063\063\065\040\074\066\075\057\076\055\077\147" +
    "\001\002\000\020\003\uffdd\015\uffdd\030\uffdd\051\uffdd\066" +
    "\uffdd\067\uffdd\070\uffdd\001\002\000\014\006\uffe8\020\uffe8" +
    "\033\uffe8\044\uffe8\077\uffe8\001\002\000\006\003\012\077" +
    "\014\001\002\000\010\006\uffa5\020\227\033\223\001\002" +
    "\000\004\070\uffa1\001\002\000\004\070\u016e\001\002\000" +
    "\004\077\u016c\001\002\000\004\070\u016a\001\002\000\004" +
    "\070\uffa3\001\002\000\004\070\uffa2\001\002\000\004\077" +
    "\u0155\001\002\000\004\006\234\001\002\000\004\070\232" +
    "\001\002\000\010\006\uffa6\020\227\033\223\001\002\000" +
    "\004\070\uffa4\001\002\000\034\003\267\006\234\007\266" +
    "\015\uff7e\017\273\021\243\022\253\036\275\045\244\046" +
    "\256\070\uff7e\074\271\077\245\001\002\000\010\002\uff93" +
    "\052\uff93\070\uff93\001\002\000\010\002\ufff8\052\ufff8\070" +
    "\ufff8\001\002\000\010\015\uff8e\043\uff8e\070\uff8e\001\002" +
    "\000\010\015\uff90\043\uff90\070\u0153\001\002\000\012\047" +
    "\u0151\052\u0108\057\u0106\073\u0107\001\002\000\010\015\uff7d" +
    "\043\uff7d\070\uff7d\001\002\000\004\074\271\001\002\000" +
    "\030\003\u014a\026\310\027\305\057\323\061\307\063\063" +
    "\065\040\074\324\075\313\076\311\077\306\001\002\000" +
    "\024\014\uff56\015\uff56\043\uff56\047\uff5f\052\uff5f\057\uff5f" +
    "\061\376\070\uff56\073\uff5f\001\002\000\010\015\uff8d\043" +
    "\uff8d\070\uff8d\001\002\000\010\015\uff7a\043\uff7a\070\uff7a" +
    "\001\002\000\012\014\uff7f\015\uff7f\043\uff7f\070\uff7f\001" +
    "\002\000\104\003\uff5d\004\uff5d\011\uff5d\012\uff5d\013\uff5d" +
    "\014\uff5d\015\uff5d\023\uff5d\025\uff5d\030\uff5d\031\uff5d\040" +
    "\uff5d\041\uff5d\043\uff5d\047\uff5d\051\uff5d\052\uff5d\053\uff5d" +
    "\054\uff5d\055\uff5d\056\uff5d\057\uff5d\060\uff5d\062\uff5d\063" +
    "\uff5d\064\uff5d\065\uff5d\066\uff5d\067\uff5d\070\uff5d\071\uff5d" +
    "\072\uff5d\073\uff5d\001\002\000\012\014\uff88\015\uff88\043" +
    "\uff88\070\uff88\001\002\000\030\003\u0140\026\310\027\305" +
    "\057\323\061\307\063\063\065\040\074\324\075\313\076" +
    "\311\077\306\001\002\000\012\014\uff85\015\uff85\043\uff85" +
    "\070\uff85\001\002\000\004\050\u013d\001\002\000\006\003" +
    "\u0135\077\u0136\001\002\000\010\015\uff7b\043\uff7b\070\uff7b" +
    "\001\002\000\010\015\uff7c\043\uff7c\070\uff7c\001\002\000" +
    "\012\014\uff87\015\uff87\043\uff87\070\uff87\001\002\000\012" +
    "\014\uff86\015\uff86\043\uff86\070\uff86\001\002\000\012\014" +
    "\uff84\015\uff84\043\uff84\070\uff84\001\002\000\012\014\uff89" +
    "\015\uff89\043\uff89\070\uff89\001\002\000\010\015\uff8b\043" +
    "\uff8b\070\uff8b\001\002\000\030\003\322\026\310\027\305" +
    "\057\323\061\307\063\063\065\040\074\324\075\313\076" +
    "\311\077\306\001\002\000\040\003\267\006\234\007\266" +
    "\015\uff7e\017\273\021\243\022\253\036\275\043\uff7e\045" +
    "\244\046\256\054\u011d\070\uff7e\074\271\077\245\001\002" +
    "\000\012\014\uff80\015\uff80\043\uff80\070\uff80\001\002\000" +
    "\016\014\ufff0\015\ufff0\043\ufff0\050\ufff0\051\ufff0\070\ufff0" +
    "\001\002\000\012\014\uff83\015\uff83\043\uff83\070\uff83\001" +
    "\002\000\006\003\u010f\077\u0110\001\002\000\012\014\uff82" +
    "\015\uff82\043\uff82\070\uff82\001\002\000\034\003\267\006" +
    "\234\007\266\017\273\021\243\022\253\036\275\043\uff7e" +
    "\045\244\046\256\070\uff7e\074\271\077\245\001\002\000" +
    "\004\015\301\001\002\000\104\003\uff5e\004\uff5e\011\uff5e" +
    "\012\uff5e\013\uff5e\014\uff5e\015\uff5e\023\uff5e\025\uff5e\030" +
    "\uff5e\031\uff5e\040\uff5e\041\uff5e\043\uff5e\047\uff5e\051\uff5e" +
    "\052\uff5e\053\uff5e\054\uff5e\055\uff5e\056\uff5e\057\uff5e\060" +
    "\uff5e\062\uff5e\063\uff5e\064\uff5e\065\uff5e\066\uff5e\067\uff5e" +
    "\070\uff5e\071\uff5e\072\uff5e\073\uff5e\001\002\000\012\014" +
    "\uff81\015\uff81\043\uff81\070\uff81\001\002\000\016\002\uff92" +
    "\014\uff92\015\uff92\043\uff92\052\uff92\070\uff92\001\002\000" +
    "\004\043\303\001\002\000\030\003\322\026\310\027\305" +
    "\057\323\061\307\063\063\065\040\074\324\075\313\076" +
    "\311\077\306\001\002\000\102\003\uff37\004\uff37\011\uff37" +
    "\012\uff37\013\uff37\014\uff37\015\uff37\023\uff37\025\uff37\030" +
    "\uff37\031\uff37\040\uff37\041\uff37\043\uff37\051\uff37\052\u0108" +
    "\053\uff37\054\uff37\055\uff37\056\uff37\057\u0106\060\uff37\062" +
    "\uff37\063\uff37\064\uff37\065\uff37\066\uff37\067\uff37\070\uff37" +
    "\071\uff37\072\uff37\073\u0107\001\002\000\024\003\330\026" +
    "\310\027\305\057\323\061\307\074\324\075\313\076\311" +
    "\077\306\001\002\000\104\003\uff5f\004\uff5f\011\uff5f\012" +
    "\uff5f\013\uff5f\014\uff5f\015\uff5f\023\uff5f\025\uff5f\030\uff5f" +
    "\031\uff5f\040\uff5f\041\uff5f\043\uff5f\051\uff5f\052\uff5f\053" +
    "\uff5f\054\uff5f\055\uff5f\056\uff5f\057\uff5f\060\uff5f\061\376" +
    "\062\uff5f\063\uff5f\064\uff5f\065\uff5f\066\uff5f\067\uff5f\070" +
    "\uff5f\071\uff5f\072\uff5f\073\uff5f\001\002\000\030\003\322" +
    "\026\310\027\305\057\323\061\307\063\063\065\040\074" +
    "\324\075\313\076\311\077\306\001\002\000\074\003\uff1d" +
    "\004\uff1d\011\uff1d\012\uff1d\013\uff1d\014\uff1d\015\uff1d\023" +
    "\uff1d\025\uff1d\030\uff1d\031\uff1d\040\uff1d\041\uff1d\043\uff1d" +
    "\051\uff1d\053\uff1d\054\uff1d\055\uff1d\056\uff1d\060\uff1d\062" +
    "\uff1d\063\uff1d\064\uff1d\065\uff1d\066\uff1d\067\uff1d\070\uff1d" +
    "\071\uff1d\072\uff1d\001\002\000\074\003\uff1e\004\uff1e\011" +
    "\uff1e\012\uff1e\013\uff1e\014\uff1e\015\uff1e\023\uff1e\025\uff1e" +
    "\030\uff1e\031\uff1e\040\uff1e\041\uff1e\043\uff1e\051\uff1e\053" +
    "\uff1e\054\uff1e\055\uff1e\056\uff1e\060\uff1e\062\uff1e\063\uff1e" +
    "\064\uff1e\065\uff1e\066\uff1e\067\uff1e\070\uff1e\071\uff1e\072" +
    "\uff1e\001\002\000\016\012\uff44\014\uff44\015\uff44\040\uff44" +
    "\043\uff44\070\uff44\001\002\000\074\003\uff20\004\uff20\011" +
    "\uff20\012\uff20\013\uff20\014\uff20\015\uff20\023\uff20\025\uff20" +
    "\030\uff20\031\uff20\040\uff20\041\uff20\043\uff20\051\uff20\053" +
    "\uff20\054\uff20\055\uff20\056\uff20\060\uff20\062\uff20\063\uff20" +
    "\064\uff20\065\uff20\066\uff20\067\uff20\070\uff20\071\uff20\072" +
    "\uff20\001\002\000\074\003\uff3b\004\uff3b\011\uff3b\012\uff3b" +
    "\013\uff3b\014\uff3b\015\uff3b\023\uff3b\025\uff3b\030\uff3b\031" +
    "\uff3b\040\uff3b\041\uff3b\043\uff3b\051\uff3b\053\uff3b\054\uff3b" +
    "\055\uff3b\056\uff3b\060\uff3b\062\uff3b\063\uff3b\064\uff3b\065" +
    "\uff3b\066\uff3b\067\uff3b\070\uff3b\071\uff3b\072\uff3b\001\002" +
    "\000\074\003\uff3f\004\342\011\344\012\uff3f\013\uff3f\014" +
    "\uff3f\015\uff3f\023\uff3f\025\340\030\uff3f\031\uff3f\040\uff3f" +
    "\041\uff3f\043\uff3f\051\uff3f\053\uff3f\054\uff3f\055\uff3f\056" +
    "\uff3f\060\uff3f\062\uff3f\063\uff3f\064\uff3f\065\uff3f\066\uff3f" +
    "\067\uff3f\070\uff3f\071\343\072\337\001\002\000\054\003" +
    "\uff43\012\uff43\013\uff43\014\uff43\015\uff43\023\363\030\uff43" +
    "\040\uff43\041\uff43\043\uff43\051\uff43\053\uff43\054\367\055" +
    "\370\056\364\060\366\062\362\064\371\066\uff43\067\uff43" +
    "\070\uff43\001\002\000\074\003\uff38\004\uff38\011\uff38\012" +
    "\uff38\013\uff38\014\uff38\015\uff38\023\uff38\025\uff38\030\uff38" +
    "\031\uff38\040\uff38\041\uff38\043\uff38\051\uff38\053\uff38\054" +
    "\uff38\055\uff38\056\uff38\060\uff38\062\uff38\063\uff38\064\uff38" +
    "\065\uff38\066\uff38\067\uff38\070\uff38\071\uff38\072\uff38\001" +
    "\002\000\062\003\uff3d\012\uff3d\013\uff3d\014\uff3d\015\uff3d" +
    "\023\uff3d\030\uff3d\031\335\040\uff3d\041\uff3d\043\uff3d\051" +
    "\uff3d\053\uff3d\054\uff3d\055\uff3d\056\uff3d\060\uff3d\062\uff3d" +
    "\063\334\064\uff3d\065\333\066\uff3d\067\uff3d\070\uff3d\001" +
    "\002\000\074\003\uff35\004\uff35\011\uff35\012\uff35\013\uff35" +
    "\014\uff35\015\uff35\023\uff35\025\uff35\030\uff35\031\uff35\040" +
    "\uff35\041\uff35\043\uff35\051\uff35\053\uff35\054\uff35\055\uff35" +
    "\056\uff35\060\uff35\062\uff35\063\uff35\064\uff35\065\uff35\066" +
    "\uff35\067\uff35\070\uff35\071\uff35\072\uff35\001\002\000\034" +
    "\003\322\026\310\027\305\047\360\057\323\061\307\063" +
    "\063\065\040\067\331\074\324\075\313\076\311\077\306" +
    "\001\002\000\032\003\322\026\310\027\305\057\323\061" +
    "\307\063\063\065\040\066\347\074\324\075\313\076\311" +
    "\077\306\001\002\000\074\003\uff1f\004\uff1f\011\uff1f\012" +
    "\uff1f\013\uff1f\014\uff1f\015\uff1f\023\uff1f\025\uff1f\030\uff1f" +
    "\031\uff1f\040\uff1f\041\uff1f\043\uff1f\051\uff1f\053\uff1f\054" +
    "\uff1f\055\uff1f\056\uff1f\060\uff1f\062\uff1f\063\uff1f\064\uff1f" +
    "\065\uff1f\066\uff1f\067\uff1f\070\uff1f\071\uff1f\072\uff1f\001" +
    "\002\000\012\014\uff79\015\uff79\043\uff79\070\uff79\001\002" +
    "\000\024\003\330\026\310\027\305\057\323\061\307\074" +
    "\324\075\313\076\311\077\306\001\002\000\062\003\uff3c" +
    "\012\uff3c\013\uff3c\014\uff3c\015\uff3c\023\uff3c\030\uff3c\031" +
    "\335\040\uff3c\041\uff3c\043\uff3c\051\uff3c\053\uff3c\054\uff3c" +
    "\055\uff3c\056\uff3c\060\uff3c\062\uff3c\063\334\064\uff3c\065" +
    "\333\066\uff3c\067\uff3c\070\uff3c\001\002\000\004\067\331" +
    "\001\002\000\074\003\uff32\004\uff32\011\uff32\012\uff32\013" +
    "\uff32\014\uff32\015\uff32\023\uff32\025\uff32\030\uff32\031\uff32" +
    "\040\uff32\041\uff32\043\uff32\051\uff32\053\uff32\054\uff32\055" +
    "\uff32\056\uff32\060\uff32\062\uff32\063\uff32\064\uff32\065\uff32" +
    "\066\uff32\067\uff32\070\uff32\071\uff32\072\uff32\001\002\000" +
    "\024\003\330\026\310\027\305\057\323\061\307\074\324" +
    "\075\313\076\311\077\306\001\002\000\024\003\uff2f\026" +
    "\uff2f\027\uff2f\057\uff2f\061\uff2f\074\uff2f\075\uff2f\076\uff2f" +
    "\077\uff2f\001\002\000\024\003\uff2e\026\uff2e\027\uff2e\057" +
    "\uff2e\061\uff2e\074\uff2e\075\uff2e\076\uff2e\077\uff2e\001\002" +
    "\000\024\003\uff2d\026\uff2d\027\uff2d\057\uff2d\061\uff2d\074" +
    "\uff2d\075\uff2d\076\uff2d\077\uff2d\001\002\000\074\003\uff3e" +
    "\004\342\011\344\012\uff3e\013\uff3e\014\uff3e\015\uff3e\023" +
    "\uff3e\025\340\030\uff3e\031\uff3e\040\uff3e\041\uff3e\043\uff3e" +
    "\051\uff3e\053\uff3e\054\uff3e\055\uff3e\056\uff3e\060\uff3e\062" +
    "\uff3e\063\uff3e\064\uff3e\065\uff3e\066\uff3e\067\uff3e\070\uff3e" +
    "\071\343\072\337\001\002\000\024\003\uff2c\026\uff2c\027" +
    "\uff2c\057\uff2c\061\uff2c\074\uff2c\075\uff2c\076\uff2c\077\uff2c" +
    "\001\002\000\024\003\uff29\026\uff29\027\uff29\057\uff29\061" +
    "\uff29\074\uff29\075\uff29\076\uff29\077\uff29\001\002\000\024" +
    "\003\330\026\310\027\305\057\323\061\307\074\324\075" +
    "\313\076\311\077\306\001\002\000\024\003\uff28\026\uff28" +
    "\027\uff28\057\uff28\061\uff28\074\uff28\075\uff28\076\uff28\077" +
    "\uff28\001\002\000\024\003\uff2b\026\uff2b\027\uff2b\057\uff2b" +
    "\061\uff2b\074\uff2b\075\uff2b\076\uff2b\077\uff2b\001\002\000" +
    "\024\003\uff2a\026\uff2a\027\uff2a\057\uff2a\061\uff2a\074\uff2a" +
    "\075\uff2a\076\uff2a\077\uff2a\001\002\000\074\003\uff3a\004" +
    "\uff3a\011\uff3a\012\uff3a\013\uff3a\014\uff3a\015\uff3a\023\uff3a" +
    "\025\uff3a\030\uff3a\031\uff3a\040\uff3a\041\uff3a\043\uff3a\051" +
    "\uff3a\053\uff3a\054\uff3a\055\uff3a\056\uff3a\060\uff3a\062\uff3a" +
    "\063\uff3a\064\uff3a\065\uff3a\066\uff3a\067\uff3a\070\uff3a\071" +
    "\uff3a\072\uff3a\001\002\000\010\051\uff47\053\355\066\uff47" +
    "\001\002\000\074\003\uff49\004\uff49\011\uff49\012\uff49\013" +
    "\uff49\014\uff49\015\uff49\023\uff49\025\uff49\030\uff49\031\uff49" +
    "\040\uff49\041\uff49\043\uff49\051\uff49\053\uff49\054\uff49\055" +
    "\uff49\056\uff49\060\uff49\062\uff49\063\uff49\064\uff49\065\uff49" +
    "\066\uff49\067\uff49\070\uff49\071\uff49\072\uff49\001\002\000" +
    "\010\051\uff45\053\uff45\066\uff45\001\002\000\006\051\352" +
    "\066\353\001\002\000\030\003\322\026\310\027\305\057" +
    "\323\061\307\063\063\065\040\074\324\075\313\076\311" +
    "\077\306\001\002\000\074\003\uff4a\004\uff4a\011\uff4a\012" +
    "\uff4a\013\uff4a\014\uff4a\015\uff4a\023\uff4a\025\uff4a\030\uff4a" +
    "\031\uff4a\040\uff4a\041\uff4a\043\uff4a\051\uff4a\053\uff4a\054" +
    "\uff4a\055\uff4a\056\uff4a\060\uff4a\062\uff4a\063\uff4a\064\uff4a" +
    "\065\uff4a\066\uff4a\067\uff4a\070\uff4a\071\uff4a\072\uff4a\001" +
    "\002\000\010\051\uff48\053\355\066\uff48\001\002\000\030" +
    "\003\322\026\310\027\305\057\323\061\307\063\063\065" +
    "\040\074\324\075\313\076\311\077\306\001\002\000\010" +
    "\051\uff46\053\uff46\066\uff46\001\002\000\036\003\uff41\012" +
    "\uff41\013\uff41\014\uff41\015\uff41\030\uff41\040\uff41\041\uff41" +
    "\043\uff41\051\uff41\053\uff41\066\uff41\067\uff41\070\uff41\001" +
    "\002\000\030\003\322\026\310\027\305\057\323\061\307" +
    "\063\063\065\040\074\324\075\313\076\311\077\306\001" +
    "\002\000\036\003\uff40\012\uff40\013\uff40\014\uff40\015\uff40" +
    "\030\uff40\040\uff40\041\uff40\043\uff40\051\uff40\053\uff40\066" +
    "\uff40\067\uff40\070\uff40\001\002\000\030\003\uff25\026\uff25" +
    "\027\uff25\057\uff25\061\uff25\063\uff25\065\uff25\074\uff25\075" +
    "\uff25\076\uff25\077\uff25\001\002\000\030\003\uff21\026\uff21" +
    "\027\uff21\057\uff21\061\uff21\063\uff21\065\uff21\074\uff21\075" +
    "\uff21\076\uff21\077\uff21\001\002\000\030\003\uff24\026\uff24" +
    "\027\uff24\057\uff24\061\uff24\063\uff24\065\uff24\074\uff24\075" +
    "\uff24\076\uff24\077\uff24\001\002\000\030\003\330\026\310" +
    "\027\305\057\323\061\307\063\063\065\040\074\324\075" +
    "\313\076\311\077\306\001\002\000\030\003\uff23\026\uff23" +
    "\027\uff23\057\uff23\061\uff23\063\uff23\065\uff23\074\uff23\075" +
    "\uff23\076\uff23\077\uff23\001\002\000\030\003\uff27\026\uff27" +
    "\027\uff27\057\uff27\061\uff27\063\uff27\065\uff27\074\uff27\075" +
    "\uff27\076\uff27\077\uff27\001\002\000\030\003\uff22\026\uff22" +
    "\027\uff22\057\uff22\061\uff22\063\uff22\065\uff22\074\uff22\075" +
    "\uff22\076\uff22\077\uff22\001\002\000\030\003\uff26\026\uff26" +
    "\027\uff26\057\uff26\061\uff26\063\uff26\065\uff26\074\uff26\075" +
    "\uff26\076\uff26\077\uff26\001\002\000\036\003\uff42\012\uff42" +
    "\013\uff42\014\uff42\015\uff42\030\uff42\040\uff42\041\uff42\043" +
    "\uff42\051\uff42\053\uff42\066\uff42\067\uff42\070\uff42\001\002" +
    "\000\006\003\375\067\374\001\002\000\074\003\uff39\004" +
    "\uff39\011\uff39\012\uff39\013\uff39\014\uff39\015\uff39\023\uff39" +
    "\025\uff39\030\uff39\031\uff39\040\uff39\041\uff39\043\uff39\051" +
    "\uff39\053\uff39\054\uff39\055\uff39\056\uff39\060\uff39\062\uff39" +
    "\063\uff39\064\uff39\065\uff39\066\uff39\067\uff39\070\uff39\071" +
    "\uff39\072\uff39\001\002\000\074\003\uff33\004\uff33\011\uff33" +
    "\012\uff33\013\uff33\014\uff33\015\uff33\023\uff33\025\uff33\030" +
    "\uff33\031\uff33\040\uff33\041\uff33\043\uff33\051\uff33\053\uff33" +
    "\054\uff33\055\uff33\056\uff33\060\uff33\062\uff33\063\uff33\064" +
    "\uff33\065\uff33\066\uff33\067\uff33\070\uff33\071\uff33\072\uff33" +
    "\001\002\000\030\003\322\026\310\027\305\057\323\061" +
    "\307\063\063\065\040\074\324\075\313\076\311\077\306" +
    "\001\002\000\074\003\uff36\004\uff36\011\uff36\012\uff36\013" +
    "\uff36\014\uff36\015\uff36\023\uff36\025\uff36\030\uff36\031\uff36" +
    "\040\uff36\041\uff36\043\uff36\051\uff36\053\uff36\054\uff36\055" +
    "\uff36\056\uff36\060\uff36\062\uff36\063\uff36\064\uff36\065\uff36" +
    "\066\uff36\067\uff36\070\uff36\071\uff36\072\uff36\001\002\000" +
    "\006\051\uff53\067\uff53\001\002\000\006\051\u0102\067\u0103" +
    "\001\002\000\030\003\322\026\310\027\305\057\323\061" +
    "\307\063\063\065\040\074\324\075\313\076\311\077\306" +
    "\001\002\000\074\003\uff55\004\uff55\011\uff55\012\uff55\013" +
    "\uff55\014\uff55\015\uff55\023\uff55\025\uff55\030\uff55\031\uff55" +
    "\040\uff55\041\uff55\043\uff55\051\uff55\053\uff55\054\uff55\055" +
    "\uff55\056\uff55\060\uff55\062\uff55\063\uff55\064\uff55\065\uff55" +
    "\066\uff55\067\uff55\070\uff55\071\uff55\072\uff55\001\002\000" +
    "\006\051\uff54\067\uff54\001\002\000\074\003\uff34\004\uff34" +
    "\011\uff34\012\uff34\013\uff34\014\uff34\015\uff34\023\uff34\025" +
    "\uff34\030\uff34\031\uff34\040\uff34\041\uff34\043\uff34\051\uff34" +
    "\053\uff34\054\uff34\055\uff34\056\uff34\060\uff34\062\uff34\063" +
    "\uff34\064\uff34\065\uff34\066\uff34\067\uff34\070\uff34\071\uff34" +
    "\072\uff34\001\002\000\030\003\322\026\310\027\305\057" +
    "\323\061\307\063\063\065\040\074\324\075\313\076\311" +
    "\077\306\001\002\000\104\003\uff5c\004\uff5c\011\uff5c\012" +
    "\uff5c\013\uff5c\014\uff5c\015\uff5c\023\uff5c\025\uff5c\030\uff5c" +
    "\031\uff5c\040\uff5c\041\uff5c\043\uff5c\047\uff5c\051\uff5c\052" +
    "\uff5c\053\uff5c\054\uff5c\055\uff5c\056\uff5c\057\uff5c\060\uff5c" +
    "\062\uff5c\063\uff5c\064\uff5c\065\uff5c\066\uff5c\067\uff5c\070" +
    "\uff5c\071\uff5c\072\uff5c\073\uff5c\001\002\000\004\077\u0109" +
    "\001\002\000\104\003\uff58\004\uff58\011\uff58\012\uff58\013" +
    "\uff58\014\uff58\015\uff58\023\uff58\025\uff58\030\uff58\031\uff58" +
    "\040\uff58\041\uff58\043\uff58\047\uff58\051\uff58\052\uff58\053" +
    "\uff58\054\uff58\055\uff58\056\uff58\057\uff58\060\uff58\062\uff58" +
    "\063\uff58\064\uff58\065\uff58\066\uff58\067\uff58\070\uff58\071" +
    "\uff58\072\uff58\073\uff58\001\002\000\006\051\u010c\066\u010d" +
    "\001\002\000\006\051\uff59\066\uff59\001\002\000\030\003" +
    "\322\026\310\027\305\057\323\061\307\063\063\065\040" +
    "\074\324\075\313\076\311\077\306\001\002\000\104\003" +
    "\uff5b\004\uff5b\011\uff5b\012\uff5b\013\uff5b\014\uff5b\015\uff5b" +
    "\023\uff5b\025\uff5b\030\uff5b\031\uff5b\040\uff5b\041\uff5b\043" +
    "\uff5b\047\uff5b\051\uff5b\052\uff5b\053\uff5b\054\uff5b\055\uff5b" +
    "\056\uff5b\057\uff5b\060\uff5b\062\uff5b\063\uff5b\064\uff5b\065" +
    "\uff5b\066\uff5b\067\uff5b\070\uff5b\071\uff5b\072\uff5b\073\uff5b" +
    "\001\002\000\006\051\uff5a\066\uff5a\001\002\000\016\014" +
    "\uff6b\015\uff6b\043\uff6b\047\u011f\054\u0120\070\uff6b\001\002" +
    "\000\004\047\u0111\001\002\000\030\003\322\026\310\027" +
    "\305\057\323\061\307\063\063\065\040\074\324\075\313" +
    "\076\311\077\306\001\002\000\010\003\u0114\013\u0116\041" +
    "\u0113\001\002\000\030\003\uff74\026\uff74\027\uff74\057\uff74" +
    "\061\uff74\063\uff74\065\uff74\074\uff74\075\uff74\076\uff74\077" +
    "\uff74\001\002\000\030\003\uff72\026\uff72\027\uff72\057\uff72" +
    "\061\uff72\063\uff72\065\uff72\074\uff72\075\uff72\076\uff72\077" +
    "\uff72\001\002\000\030\003\322\026\310\027\305\057\323" +
    "\061\307\063\063\065\040\074\324\075\313\076\311\077" +
    "\306\001\002\000\030\003\uff73\026\uff73\027\uff73\057\uff73" +
    "\061\uff73\063\uff73\065\uff73\074\uff73\075\uff73\076\uff73\077" +
    "\uff73\001\002\000\006\003\u0119\012\u0118\001\002\000\040" +
    "\003\u011c\006\234\007\266\014\uff7e\015\uff7e\017\273\021" +
    "\243\022\253\036\275\043\uff7e\045\244\046\256\070\uff7e" +
    "\074\271\077\245\001\002\000\010\015\uff6f\043\uff6f\070" +
    "\uff6f\001\002\000\010\015\uff71\043\uff71\070\uff71\001\002" +
    "\000\012\014\uff6d\015\uff6d\043\uff6d\070\uff6d\001\002\000" +
    "\004\054\u011d\001\002\000\030\003\322\026\310\027\305" +
    "\057\323\061\307\063\063\065\040\074\324\075\313\076" +
    "\311\077\306\001\002\000\012\014\uff60\015\uff60\043\uff60" +
    "\070\uff60\001\002\000\010\015\uff6e\043\uff6e\070\uff6e\001" +
    "\002\000\030\003\322\026\310\027\305\057\323\061\307" +
    "\063\063\065\040\074\324\075\313\076\311\077\306\001" +
    "\002\000\010\003\u0114\013\u0116\041\u0113\001\002\000\030" +
    "\003\322\026\310\027\305\057\323\061\307\063\063\065" +
    "\040\074\324\075\313\076\311\077\306\001\002\000\004" +
    "\012\u0124\001\002\000\040\003\u011c\006\234\007\266\014" +
    "\uff7e\015\uff7e\017\273\021\243\022\253\036\275\043\uff7e" +
    "\045\244\046\256\070\uff7e\074\271\077\245\001\002\000" +
    "\010\015\uff70\043\uff70\070\uff70\001\002\000\012\014\uff6c" +
    "\015\uff6c\043\uff6c\070\uff6c\001\002\000\006\015\uff8f\043" +
    "\uff8f\001\002\000\004\030\u0129\001\002\000\016\063\063" +
    "\065\040\074\066\075\057\076\055\077\147\001\002\000" +
    "\006\050\u0131\051\155\001\002\000\006\015\u012e\070\u012d" +
    "\001\002\000\006\015\uff4e\070\uff4e\001\002\000\020\015" +
    "\u0130\063\063\065\040\074\066\075\057\076\055\077\147" +
    "\001\002\000\012\014\uff51\015\uff51\043\uff51\070\uff51\001" +
    "\002\000\006\015\uff4f\070\uff4f\001\002\000\012\014\uff50" +
    "\015\uff50\043\uff50\070\uff50\001\002\000\034\003\u011c\006" +
    "\234\007\266\015\uff7e\017\273\021\243\022\253\036\275" +
    "\045\244\046\256\070\uff7e\074\271\077\245\001\002\000" +
    "\006\015\uff4d\070\uff4d\001\002\000\006\012\u0139\051\u0138" +
    "\001\002\000\014\012\uff4b\051\uff4b\052\u0108\057\u0106\073" +
    "\u0107\001\002\000\014\012\u0137\014\uff67\015\uff67\043\uff67" +
    "\070\uff67\001\002\000\014\012\uff5f\051\uff5f\052\uff5f\057" +
    "\uff5f\073\uff5f\001\002\000\010\015\uff69\043\uff69\070\uff69" +
    "\001\002\000\004\077\u0136\001\002\000\040\003\u011c\006" +
    "\234\007\266\014\uff7e\015\uff7e\017\273\021\243\022\253" +
    "\036\275\043\uff7e\045\244\046\256\070\uff7e\074\271\077" +
    "\245\001\002\000\010\015\uff6a\043\uff6a\070\uff6a\001\002" +
    "\000\012\014\uff68\015\uff68\043\uff68\070\uff68\001\002\000" +
    "\014\012\uff4c\051\uff4c\052\u0108\057\u0106\073\u0107\001\002" +
    "\000\036\003\u011c\006\234\007\266\014\uff7e\015\uff7e\017" +
    "\273\021\243\022\253\036\275\043\uff7e\045\244\046\256" +
    "\070\uff7e\077\245\001\002\000\010\015\uff8c\043\uff8c\070" +
    "\uff8c\001\002\000\012\014\uff8a\015\uff8a\043\uff8a\070\uff8a" +
    "\001\002\000\046\003\322\014\uff62\015\uff62\026\310\027" +
    "\305\040\u0148\043\uff62\047\360\057\323\061\307\063\063" +
    "\065\040\067\331\070\uff62\074\324\075\313\076\311\077" +
    "\306\001\002\000\004\040\u0142\001\002\000\040\003\u011c" +
    "\006\234\007\266\014\uff7e\015\uff7e\017\273\021\243\022" +
    "\253\036\275\043\uff7e\045\244\046\256\070\uff7e\074\271" +
    "\077\245\001\002\000\010\015\uff66\043\uff66\070\uff66\001" +
    "\002\000\012\014\u0145\015\uff8d\043\uff8d\070\uff8d\001\002" +
    "\000\040\003\u011c\006\234\007\266\014\uff7e\015\uff7e\017" +
    "\273\021\243\022\253\036\275\043\uff7e\045\244\046\256" +
    "\070\uff7e\074\271\077\245\001\002\000\010\015\uff65\043" +
    "\uff65\070\uff65\001\002\000\012\014\uff63\015\uff63\043\uff63" +
    "\070\uff63\001\002\000\010\015\uff64\043\uff64\070\uff64\001" +
    "\002\000\012\014\uff57\015\uff57\043\uff57\070\uff57\001\002" +
    "\000\046\003\322\012\u014f\014\uff75\015\uff75\026\310\027" +
    "\305\043\uff75\047\360\057\323\061\307\063\063\065\040" +
    "\067\331\070\uff75\074\324\075\313\076\311\077\306\001" +
    "\002\000\004\012\u014c\001\002\000\040\003\u011c\006\234" +
    "\007\266\014\uff7e\015\uff7e\017\273\021\243\022\253\036" +
    "\275\043\uff7e\045\244\046\256\070\uff7e\074\271\077\245" +
    "\001\002\000\010\015\uff78\043\uff78\070\uff78\001\002\000" +
    "\012\014\uff76\015\uff76\043\uff76\070\uff76\001\002\000\010" +
    "\015\uff77\043\uff77\070\uff77\001\002\000\012\014\uff52\015" +
    "\uff52\043\uff52\070\uff52\001\002\000\030\003\322\026\310" +
    "\027\305\057\323\061\307\063\063\065\040\074\324\075" +
    "\313\076\311\077\306\001\002\000\012\014\uff61\015\uff61" +
    "\043\uff61\070\uff61\001\002\000\036\003\267\006\234\007" +
    "\266\015\uff7e\017\273\021\243\022\253\036\275\043\uff7e" +
    "\045\244\046\256\070\uff7e\074\271\077\245\001\002\000" +
    "\006\015\uff91\043\uff91\001\002\000\006\050\u0157\061\u0158" +
    "\001\002\000\004\050\u0168\001\002\000\004\077\u0167\001" +
    "\002\000\010\003\012\044\u015a\077\014\001\002\000\006" +
    "\067\uff99\070\uff99\001\002\000\006\003\012\077\014\001" +
    "\002\000\006\067\uff9b\070\uff9b\001\002\000\006\067\uff9a" +
    "\070\uff9a\001\002\000\006\067\u0161\070\u0162\001\002\000" +
    "\006\050\u015f\051\015\001\002\000\004\077\u0160\001\002" +
    "\000\006\067\uff98\070\uff98\001\002\000\006\050\uff9d\070" +
    "\uff9d\001\002\000\010\003\012\044\u015a\077\014\001\002" +
    "\000\006\067\uff9c\070\uff9c\001\002\000\006\050\u0165\051" +
    "\015\001\002\000\004\077\u0166\001\002\000\006\067\uff97" +
    "\070\uff97\001\002\000\004\070\uff95\001\002\000\004\077" +
    "\u0169\001\002\000\004\070\uff94\001\002\000\022\003\023" +
    "\006\ufff4\010\ufff4\020\ufff4\024\022\033\ufff4\042\ufff4\044" +
    "\ufff4\001\002\000\004\070\uffa0\001\002\000\006\061\u0158" +
    "\070\uff9f\001\002\000\004\070\uff9e\001\002\000\022\003" +
    "\023\006\ufff4\010\ufff4\020\ufff4\024\022\033\ufff4\042\ufff4" +
    "\044\ufff4\001\002\000\004\070\uff96\001\002\000\006\003" +
    "\u0176\070\u0175\001\002\000\006\050\u0173\051\015\001\002" +
    "\000\006\003\uffa8\070\uffa8\001\002\000\036\003\064\005" +
    "\070\016\043\032\046\035\062\037\060\061\052\063\063" +
    "\065\040\073\054\074\066\075\057\076\055\077\047\001" +
    "\002\000\006\003\uffa7\070\uffa7\001\002\000\014\003\012" +
    "\006\uffac\020\uffac\033\uffac\077\014\001\002\000\010\006" +
    "\uffab\020\uffab\033\uffab\001\002\000\006\003\uffa9\070\uffa9" +
    "\001\002\000\004\054\u017c\001\002\000\016\006\uffef\020" +
    "\uffef\033\uffef\042\uffef\044\uffef\077\u0178\001\002\000\016" +
    "\006\uffec\020\uffec\033\uffec\042\uffec\044\uffec\077\uffec\001" +
    "\002\000\016\006\uffed\020\uffed\033\uffed\042\uffed\044\uffed" +
    "\077\uffed\001\002\000\016\063\063\065\040\074\066\075" +
    "\057\076\055\077\147\001\002\000\004\070\u017e\001\002" +
    "\000\016\006\uffeb\020\uffeb\033\uffeb\042\uffeb\044\uffeb\077" +
    "\uffeb\001\002\000\006\051\ufff2\070\ufff2\001\002\000\006" +
    "\051\ufff1\070\ufff1\001\002\000\006\051\u0182\070\u0183\001" +
    "\002\000\004\074\271\001\002\000\016\006\ufff6\010\ufff6" +
    "\020\ufff6\033\ufff6\042\ufff6\044\ufff6\001\002\000\006\051" +
    "\ufff3\070\ufff3\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\024\006\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\u0180\015\u017e" +
    "\001\001\000\002\001\001\000\004\007\030\001\001\000" +
    "\004\145\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\u0178\017\u0179\001\001\000\004\010\031\001" +
    "\001\000\004\011\217\001\001\000\006\020\034\021\033" +
    "\001\001\000\002\001\001\000\004\021\215\001\001\000" +
    "\002\001\001\000\036\022\064\023\050\024\060\025\047" +
    "\026\043\027\044\030\055\031\066\032\052\033\072\034" +
    "\041\040\071\137\070\144\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\031\066\032\052" +
    "\033\072\034\041\040\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\132\042\133\043\127\044\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\024" +
    "\105\027\044\030\055\036\104\037\100\041\117\137\070" +
    "\144\040\001\001\000\022\024\105\027\044\030\055\036" +
    "\104\037\100\041\103\137\070\144\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\024\105" +
    "\027\044\030\055\036\115\037\100\137\070\144\040\001" +
    "\001\000\020\024\105\027\044\030\055\036\114\037\100" +
    "\137\070\144\040\001\001\000\002\001\001\000\040\022" +
    "\112\023\050\024\060\025\047\026\043\027\044\030\055" +
    "\031\066\032\052\033\072\034\041\035\113\040\071\137" +
    "\070\144\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\022\112\023\050" +
    "\024\060\025\047\026\043\027\044\030\055\031\066\032" +
    "\052\033\072\034\041\035\122\040\071\137\070\144\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\022" +
    "\112\023\050\024\060\025\047\026\043\027\044\030\055" +
    "\031\066\032\052\033\072\034\041\035\125\040\071\137" +
    "\070\144\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\046\144\047\143\050\142\051\147" +
    "\137\070\144\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\137\070\144\151\001\001\000" +
    "\002\001\001\000\014\047\153\050\142\051\147\137\070" +
    "\144\145\001\001\000\002\001\001\000\010\051\167\137" +
    "\070\144\145\001\001\000\002\001\001\000\012\004\132" +
    "\042\160\043\157\044\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\132\043\163" +
    "\044\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\132\043\172\044\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\022\175\023\050" +
    "\024\060\025\047\026\043\027\044\030\055\031\066\032" +
    "\052\033\072\034\041\040\071\137\070\144\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\024\105\027\044\030\055\037\201\052\202\137\070" +
    "\144\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\022" +
    "\112\023\050\024\060\025\047\026\043\027\044\030\055" +
    "\031\066\032\052\033\072\034\041\035\212\040\071\137" +
    "\070\144\040\001\001\000\002\001\001\000\006\137\070" +
    "\144\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\u0170\053\u016f\054\u0171\001\001\000\020\012\227" +
    "\055\230\056\224\057\225\060\220\061\223\062\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\235\070\234\001\001\000\002" +
    "\001\001\000\014\056\232\057\225\060\220\061\223\062" +
    "\221\001\001\000\002\001\001\000\062\015\254\070\253" +
    "\071\275\072\237\073\236\074\245\075\264\076\263\077" +
    "\251\100\260\101\261\102\262\103\271\104\273\105\277" +
    "\106\267\107\247\110\241\111\257\112\256\113\246\116" +
    "\240\117\276\120\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u014f\001\001\000\032" +
    "\116\303\117\276\120\250\126\320\131\u014a\132\311\133" +
    "\315\134\317\135\314\136\313\137\325\143\316\001\001" +
    "\000\004\122\u0148\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\116\303\117\276\120\250\126\320\131\u0140\132" +
    "\311\133\315\134\317\135\314\136\313\137\325\143\316" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\115" +
    "\u0132\116\u0133\117\276\120\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\116\303\117\276\120\250\126\320\132\u0127\133\315\134" +
    "\317\135\314\136\313\137\325\143\316\001\001\000\062" +
    "\015\254\070\253\071\u0126\072\237\073\236\074\245\075" +
    "\264\076\263\077\251\100\260\101\261\102\262\103\271" +
    "\104\273\105\277\106\267\107\247\110\241\111\257\112" +
    "\256\113\246\116\240\117\276\120\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\015\254\070\253\071\301" +
    "\072\237\073\236\074\245\075\264\076\263\077\251\100" +
    "\260\101\261\102\262\103\271\104\273\105\277\106\267" +
    "\107\247\110\241\111\257\112\256\113\246\116\240\117" +
    "\276\120\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\116\303\117\276\120\250\126\320\131\324\132\311" +
    "\133\315\134\317\135\314\136\313\137\325\143\316\001" +
    "\001\000\002\001\001\000\016\116\303\117\276\120\250" +
    "\126\320\136\u0104\143\316\001\001\000\004\122\376\001" +
    "\001\000\030\116\303\117\276\120\250\126\320\132\372" +
    "\133\315\134\317\135\314\136\313\137\325\143\316\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\141\340\001" +
    "\001\000\004\142\364\001\001\000\002\001\001\000\004" +
    "\140\331\001\001\000\002\001\001\000\030\116\303\117" +
    "\276\120\250\126\320\132\356\133\315\134\317\135\314" +
    "\136\313\137\325\143\316\001\001\000\034\116\303\117" +
    "\276\120\250\126\320\127\350\130\345\132\347\133\315" +
    "\134\317\135\314\136\313\137\325\143\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\116\303\117\276" +
    "\120\250\126\320\134\326\135\314\136\313\143\316\001" +
    "\001\000\004\140\331\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\116\303\117\276\120\250\126\320\135" +
    "\335\136\313\143\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\141\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\116\303\117\276" +
    "\120\250\126\320\136\344\143\316\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\116\303\117\276\120\250\126\320" +
    "\130\353\132\347\133\315\134\317\135\314\136\313\137" +
    "\325\143\316\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\116\303\117\276\120\250\126\320\132\355\133" +
    "\315\134\317\135\314\136\313\137\325\143\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\116\303\117" +
    "\276\120\250\126\320\132\360\133\315\134\317\135\314" +
    "\136\313\137\325\143\316\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\116\303\117\276\120\250\126\320\133\371\134\317\135" +
    "\314\136\313\137\325\143\316\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\116\303\117\276\120\250\123\u0100\126" +
    "\320\132\377\133\315\134\317\135\314\136\313\137\325" +
    "\143\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\116\303\117\276\120\250\126\320" +
    "\132\u0103\133\315\134\317\135\314\136\313\137\325\143" +
    "\316\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\116\303\117\276\120\250\121\u0109\126" +
    "\320\132\u010a\133\315\134\317\135\314\136\313\137\325" +
    "\143\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\116\303\117\276\120\250\126\320\132\u010d\133\315\134" +
    "\317\135\314\136\313\137\325\143\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\116\303\117\276\120\250\126\320\132\u0111" +
    "\133\315\134\317\135\314\136\313\137\325\143\316\001" +
    "\001\000\004\114\u0114\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\116\303\117\276\120\250\126\320\132" +
    "\u0116\133\315\134\317\135\314\136\313\137\325\143\316" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\015" +
    "\254\070\253\073\u0119\074\u011a\075\264\076\263\077\251" +
    "\100\260\101\261\102\262\103\271\104\273\105\277\106" +
    "\267\107\247\110\241\111\257\112\256\113\246\116\240" +
    "\117\276\120\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\116\303" +
    "\117\276\120\250\126\320\132\u011d\133\315\134\317\135" +
    "\314\136\313\137\325\143\316\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\116\303\117\276\120\250\126" +
    "\320\132\u0120\133\315\134\317\135\314\136\313\137\325" +
    "\143\316\001\001\000\004\114\u0121\001\001\000\030\116" +
    "\303\117\276\120\250\126\320\132\u0122\133\315\134\317" +
    "\135\314\136\313\137\325\143\316\001\001\000\002\001" +
    "\001\000\056\015\254\070\253\073\u0124\074\u0125\075\264" +
    "\076\263\077\251\100\260\101\261\102\262\103\271\104" +
    "\273\105\277\106\267\107\247\110\241\111\257\112\256" +
    "\113\246\116\240\117\276\120\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\050\u0129\051\147\124\u012a\125\u012b\137\070\144" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\050\u0129\051\147\125\u012e\137\070\144" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\015\254\070\253\072\u0131\073\236\074" +
    "\245\075\264\076\263\077\251\100\260\101\261\102\262" +
    "\103\271\104\273\105\277\106\267\107\247\110\241\111" +
    "\257\112\256\113\246\116\240\117\276\120\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\116\u013b\117\276\120\250\001\001\000\056\015\254\070" +
    "\253\073\u0139\074\u013a\075\264\076\263\077\251\100\260" +
    "\101\261\102\262\103\271\104\273\105\277\106\267\107" +
    "\247\110\241\111\257\112\256\113\246\116\240\117\276" +
    "\120\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\070\253\075\u013d\076\u013e\077\251" +
    "\100\260\101\261\102\262\103\271\104\273\105\277\106" +
    "\267\107\247\110\241\111\257\112\256\113\246\116\240" +
    "\117\276\120\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\116\303\117\276\120\250\126\320\132\356" +
    "\133\315\134\317\135\314\136\313\137\325\143\316\001" +
    "\001\000\002\001\001\000\060\015\254\070\253\072\u0142" +
    "\073\236\074\u0143\075\264\076\263\077\251\100\260\101" +
    "\261\102\262\103\271\104\273\105\277\106\267\107\247" +
    "\110\241\111\257\112\256\113\246\116\240\117\276\120" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\015\254\070\253\073\u0145\074\u0146\075\264\076\263\077" +
    "\251\100\260\101\261\102\262\103\271\104\273\105\277" +
    "\106\267\107\247\110\241\111\257\112\256\113\246\116" +
    "\240\117\276\120\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\116" +
    "\303\117\276\120\250\126\320\132\356\133\315\134\317" +
    "\135\314\136\313\137\325\143\316\001\001\000\002\001" +
    "\001\000\056\015\254\070\253\073\u014c\074\u014d\075\264" +
    "\076\263\077\251\100\260\101\261\102\262\103\271\104" +
    "\273\105\277\106\267\107\247\110\241\111\257\112\256" +
    "\113\246\116\240\117\276\120\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\116\303\117\276\120\250\126\320\132\u0151\133" +
    "\315\134\317\135\314\136\313\137\325\143\316\001\001" +
    "\000\002\001\001\000\062\015\254\070\253\071\u0153\072" +
    "\237\073\236\074\245\075\264\076\263\077\251\100\260" +
    "\101\261\102\262\103\271\104\273\105\277\106\267\107" +
    "\247\110\241\111\257\112\256\113\246\116\240\117\276" +
    "\120\250\001\001\000\002\001\001\000\004\063\u0155\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\u015d" +
    "\064\u015c\065\u015a\066\u015b\067\u0158\001\001\000\002\001" +
    "\001\000\004\004\u0163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\u015d" +
    "\065\u0162\066\u015b\067\u0158\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u016a\006\023\001\001\000\002\001\001\000\004\063\u016c" +
    "\001\001\000\002\001\001\000\006\005\u016e\006\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\022\u0173\023\050\024\060\025" +
    "\047\026\043\027\044\030\055\031\066\032\052\033\072" +
    "\034\041\040\071\137\070\144\040\001\001\000\002\001" +
    "\001\000\006\004\u0170\054\u0176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u017a\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\137\070" +
    "\144\u017c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u0183\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  
  public static String filename = "";
  public static boolean unrecoverableError = false;
  
  /* Don't do that! 
  protected int error_sync_size() {
    return 1;
  }
  */
  

  public static TSymbol buildTree(String nameOfProduction, TSymbol[] production) {
    int left, right;
    int i;
    String newText = "";
    
    left = -1;
    right = -1;
    for (i=0; i<production.length; ++i) {
      if (production[i] != null) {
        left = i;
        break;
      }
    }
    for (i=production.length-1; i>=0; --i) {
      if (production[i] != null) {
        right = i;
        break;
      }
    }
    
    if (left == -1 && right == -1) {
      /* This production is reduced into null */
      /* System.err.println("Production "+nameOfProduction+" is reduced to null."); */
      return null; 
    }
    
    for (i=left; i<=right; ++i) {
      if (production[i] == null) {
        continue;
      }
      newText += production[i].stringValue;
      if (!Character.isWhitespace(newText.charAt(newText.length()-1))) {
        newText += " ";
      }
    }
    
    TSymbol result = new TSymbol(production[left].start, production[right].end, newText, -1, nameOfProduction);
    result.children = production;  
    return result;
  }
    
  public void report_error(String text, Object o) {
    System.err.println(text);
  }

  public void syntax_error(Symbol cur) {
    String s;
    if (cur == null) {
      return;
    }
    
    if (cur.sym == sym.EOF) {
      System.err.println("Syntax error: unexpected end of file encountered.");
      return;
    }
      
    TSymbol sym = (TSymbol)(cur.value);
    System.err.println("Syntax error near symbol '"+sym.stringValue+"' - line: "+
      sym.start.lineNumber+" column: "+sym.start.lineOffset); 
    if (sym.start.lineOffset > 1) {
      /* Context is OK only if the error is not at the begining of the line */
      s = Report.getLine(filename, sym.start.lineNumber);
      System.err.println(s);
      System.err.println(Report.markerString(s, sym.start.lineOffset, '^'));
    }
  }

  public void unrecovered_syntax_error(Symbol cur) {
    System.err.println("Unrecoverable syntax error, giving up.");
    System.exit(5);
  }
   
  public static void main(String args[]) {
    String xmlFilename = "output.xml";
    PrintStream outStream = System.out;
    Symbol tree = null;
    parser myParser = null;
    Lexer myLexer = null;
        
    if (args.length < 1) {
      System.err.println("java sem2.parser [filename]");
      System.exit(1);
    } else {
      filename = args[0];
    }
    
    /* Output filename: file.pas -> file.xml (or output.xml) */
    int index = filename.lastIndexOf('.');
    if (index > 0) {
      xmlFilename = filename.substring(0, index) + ".xml";
    }
    
    try {
	  FileInputStream fs = new FileInputStream(args[0]);
      try {
        myLexer = new Lexer(fs);
        myLexer.filename = filename;
        myParser = new parser(myLexer);
        tree = myParser.parse();
        /*
        tree = myParser.debug_parse();
        */
      }
      catch (Exception e) {
        e.printStackTrace();
        System.exit(6);
      }
    }
    catch (FileNotFoundException fex) {
      System.err.println("File '"+args[0]+"' not found.");
      System.exit(2);
    }
    catch (Exception ex) {
      System.err.println("Couldn't read from '"+args[0]+"' because of: "+ex.toString());
      System.exit(3);
    }
    
    if (unrecoverableError) {
      System.err.println("There were some errors that couldn't get repaired.");
      System.exit(11);
    }
        

    /* XML stuff */
    System.out.println("Done with the parsing - starting output to file "+xmlFilename+".");
    try {
      PrintStream output = new PrintStream(new FileOutputStream(xmlFilename));
      if (tree == null || tree.value == null) {
        System.err.println("Internal error!");
        System.exit(10);
      }
      ((TSymbol)(tree.value)).output(output, "");                  
      outStream.flush();
    }
    catch (Exception ex) {
        System.err.println("Couldn't write to output file because of: "+ex.toString());
    }

    System.out.println("-----------------------------------");
    
    TSemantic semantic = new TSemantic();
    semantic.fileName = args[0];    
    semantic.check(((TSymbol)(tree.value)));

    index = xmlFilename.lastIndexOf(".xml");
    if (index > 0) {
      xmlFilename = xmlFilename.substring(0, index) + ".semantic.xml";
    } else {
      xmlFilename = "output.semantic.xml";
    }
    System.out.println("Starting output of symbol table to: "+xmlFilename);
    semantic.output(xmlFilename);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // optional_dot ::= 
            {
              TSymbol RESULT = null;
		 System.err.println("Warning: Missing ending '.' character."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_dot",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // optional_dot ::= DOT 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_dot",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // constant ::= STRING 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("constant", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // constant ::= IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("constant", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // constant ::= UINT 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("constant", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // constant ::= sign UINT 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("constant", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // constant ::= UNUMBER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // constant ::= sign UNUMBER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("constant", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // constant ::= sign IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("constant", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // unsigned_constant ::= NIL 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("unsigned_constant", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unsigned_constant",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // unsigned_constant ::= STRING 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("unsigned_constant", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unsigned_constant",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // unsigned_constant ::= UINT 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("unsigned_constant", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unsigned_constant",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // unsigned_constant ::= UNUMBER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("unsigned_constant", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unsigned_constant",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // relop ::= IN 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("relop", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // relop ::= GE 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("relop", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // relop ::= LE 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("relop", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // relop ::= GT 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("relop", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // relop ::= LT 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("relop", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // relop ::= NOTEQUAL 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("relop", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // relop ::= EQUAL 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("relop", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // mulop ::= AND 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("mulop", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // mulop ::= MOD 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("mulop", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // mulop ::= DIV 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("mulop", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // mulop ::= SLASH 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("mulop", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // mulop ::= STAR 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("mulop", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // addop ::= OR 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("addop", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // addop ::= MINUS 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("addop", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // addop ::= PLUS 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("addop", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // sign ::= MINUS 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("sign", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // sign ::= PLUS 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("sign", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // factor ::= error RPAREN 
            {
              TSymbol RESULT = null;
		 System.err.println("'(' is probably missing."); parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // factor ::= LPAREN expression error 
            {
              TSymbol RESULT = null;
		 System.err.println("')' is probably missing."); parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // factor ::= NOT factor 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("factor", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // factor ::= set_constructor 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("factor", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // factor ::= IDENTIFIER params 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("factor", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // factor ::= variable_access 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("factor", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // factor ::= unsigned_constant 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("factor", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // factor ::= LPAREN expression RPAREN 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("factor", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // term ::= term mulop factor 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("term", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // term ::= factor 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("term", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // simple_expression_signed ::= sign simple_expression 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("simple_expression_signed", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression_signed",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // simple_expression_signed ::= simple_expression 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("simple_expression_signed", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression_signed",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // simple_expression ::= simple_expression addop term 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("simple_expression", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // simple_expression ::= term 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("simple_expression", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // expression ::= error ASSIGNMENT expression 
            {
              TSymbol RESULT = null;
		 System.err.println("Maybe '=' instead of ':=' would be better." +
    " This is not C - you can't use assignments in expressions, sorry."); 
    parser.unrecoverableError = true; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expression ::= error expression 
            {
              TSymbol RESULT = null;
		 System.err.println("Missing operator."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expression ::= simple_expression_signed relop simple_expression_signed 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("expression", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expression ::= simple_expression_signed 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("expression", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // boolean_expression ::= expression 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("boolean_expression", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // member_designator ::= expression 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("member_designator", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("member_designator",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // member_designator ::= member_designator DOTDOT expression 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("member_designator", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("member_designator",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // member_designator_list ::= member_designator 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("member_designator_list", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("member_designator_list",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // member_designator_list ::= member_designator_list COMMA member_designator 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("member_designator_list", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("member_designator_list",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // set_constructor ::= LBRAC RBRAC 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("set_constructor", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_constructor",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // set_constructor ::= LBRAC member_designator_list RBRAC 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("set_constructor", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_constructor",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // record_variable_list ::= variable_access 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("record_variable_list", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_variable_list",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // record_variable_list ::= record_variable_list COMMA variable_access 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("record_variable_list", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_variable_list",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // case_list_element ::= case_constant_list COLON statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("case_list_element", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list_element",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // case_list_element_list ::= case_list_element 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("case_list_element_list", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list_element_list",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // case_list_element_list ::= case_list_element_list SEMICOLON case_list_element 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("case_list_element_list", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list_element_list",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // case_statement ::= CASE expression OF case_list_element_list SEMICOLON END 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol e = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol f = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("case_statement", new TSymbol[]{a, b, c, d, e, f}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // case_statement ::= CASE expression OF case_list_element_list END 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol e = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("case_statement", new TSymbol[]{a, b, c, d, e}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // goto_statement ::= GOTO label 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("goto_statement", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goto_statement",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // actual_parameter_list ::= expression 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("actual_parameter_list", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameter_list",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // actual_parameter_list ::= actual_parameter_list COMMA expression 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("actual_parameter_list", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameter_list",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // params ::= LPAREN actual_parameter_list RPAREN 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("params", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // procedure_statement ::= IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("procedure_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_statement",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // procedure_statement ::= IDENTIFIER params 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("procedure_statement", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_statement",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // field_designator ::= variable_access DOT IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("field_designator", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_designator",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // index_expression_list ::= expression 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("index_expression_list", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_expression_list",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // index_expression_list ::= index_expression_list COMMA expression 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("index_expression_list", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_expression_list",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // indexed_variable ::= variable_access LBRAC index_expression_list RBRAC 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("indexed_variable", new TSymbol[]{a, b, c, d}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("indexed_variable",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // variable_access ::= variable_access UPARROW 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variable_access", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_access",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // variable_access ::= field_designator 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variable_access", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_access",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // variable_access ::= indexed_variable 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variable_access", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_access",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // variable_access ::= IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variable_access", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_access",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // assignment_statement ::= error EQUAL expression 
            {
              TSymbol RESULT = null;
		 System.err.println("Make sure you are using ':=' instead of '='."); parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // assignment_statement ::= variable_access ASSIGNMENT expression 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("assignment_statement", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // closed_if_statement ::= IF error 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad 'if' statement."); parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("closed_if_statement",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // closed_if_statement ::= IF boolean_expression THEN closed_statement ELSE closed_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol e = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol f = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("closed_if_statement", new TSymbol[]{a, b, c, d, e, f}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("closed_if_statement",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // open_if_statement ::= IF error THEN 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad 'if' statement."); parser.unrecoverableError = true;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("open_if_statement",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // open_if_statement ::= IF boolean_expression THEN closed_statement ELSE open_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol e = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol f = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("open_if_statement", new TSymbol[]{a, b, c, d, e, f}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("open_if_statement",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // open_if_statement ::= IF boolean_expression THEN statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("open_if_statement", new TSymbol[]{a, b, c, d}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("open_if_statement",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // closed_with_statement ::= WITH error 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad 'with' statement."); parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("closed_with_statement",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // closed_with_statement ::= WITH record_variable_list DO closed_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("closed_with_statement", new TSymbol[]{a, b, c, d}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("closed_with_statement",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // open_with_statement ::= WITH error DO 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad 'with' statement."); parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("open_with_statement",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // open_with_statement ::= WITH record_variable_list DO open_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("open_with_statement", new TSymbol[]{a, b, c, d}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("open_with_statement",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // closed_for_statement ::= FOR error 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad 'for' statement."); parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("closed_for_statement",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // closed_for_statement ::= FOR error EQUAL expression direction expression DO closed_statement 
            {
              TSymbol RESULT = null;
		 System.err.println("Use ':=' instead of '=' in the variable assignment at the 'for' loop."); 
      parser.unrecoverableError = true;
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("closed_for_statement",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // closed_for_statement ::= FOR IDENTIFIER ASSIGNMENT expression direction expression DO closed_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol e = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol f = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol g = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol h = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("closed_for_statement", new TSymbol[]{a, b, c, d, e, f, g, h}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("closed_for_statement",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // open_for_statement ::= FOR error ASSIGNMENT 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad 'for' statement."); parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("open_for_statement",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // open_for_statement ::= FOR IDENTIFIER ASSIGNMENT expression direction expression error 
            {
              TSymbol RESULT = null;
		 System.err.println("Maybe there is a 'do' in the 'for' loop missing."); parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("open_for_statement",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // open_for_statement ::= FOR error EQUAL expression direction expression DO open_statement 
            {
              TSymbol RESULT = null;
		 System.err.println("Use ':=' instead of '=' in the variable assignment at the 'for' loop."); parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("open_for_statement",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // open_for_statement ::= FOR IDENTIFIER ASSIGNMENT expression direction expression DO open_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol e = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol f = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol g = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol h = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("open_for_statement", new TSymbol[]{a, b, c, d, e, f, g, h}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("open_for_statement",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // direction ::= error 
            {
              TSymbol RESULT = null;
		 System.err.println("The direction either needs to be 'to' or 'downto'."); 
    parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("direction",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // direction ::= DOWNTO 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("direction", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("direction",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // direction ::= TO 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("direction", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("direction",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // closed_while_statement ::= WHILE error 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad 'while' statement."); parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("closed_while_statement",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // closed_while_statement ::= WHILE boolean_expression DO closed_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("closed_while_statement", new TSymbol[]{a, b, c, d}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("closed_while_statement",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // open_while_statement ::= WHILE error DO 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad 'while' statement."); parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("open_while_statement",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // open_while_statement ::= WHILE boolean_expression DO open_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("open_while_statement", new TSymbol[]{a, b, c, d}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("open_while_statement",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // repeat_statement ::= REPEAT statement_sequence UNTIL boolean_expression 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("repeat_statement", new TSymbol[]{a, b, c, d}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_statement",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // non_labeled_open_statement ::= open_for_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("non_labeled_open_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_labeled_open_statement",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // non_labeled_open_statement ::= open_while_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("non_labeled_open_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_labeled_open_statement",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // non_labeled_open_statement ::= open_if_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("non_labeled_open_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_labeled_open_statement",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // non_labeled_open_statement ::= open_with_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("non_labeled_open_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_labeled_open_statement",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // non_labeled_closed_statement ::= 
            {
              TSymbol RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_labeled_closed_statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // non_labeled_closed_statement ::= closed_for_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("non_labeled_closed_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_labeled_closed_statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // non_labeled_closed_statement ::= closed_while_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("non_labeled_closed_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_labeled_closed_statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // non_labeled_closed_statement ::= closed_if_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("non_labeled_closed_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_labeled_closed_statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // non_labeled_closed_statement ::= closed_with_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("non_labeled_closed_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_labeled_closed_statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // non_labeled_closed_statement ::= repeat_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("non_labeled_closed_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_labeled_closed_statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // non_labeled_closed_statement ::= case_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("non_labeled_closed_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_labeled_closed_statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // non_labeled_closed_statement ::= compound_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("non_labeled_closed_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_labeled_closed_statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // non_labeled_closed_statement ::= goto_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("non_labeled_closed_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_labeled_closed_statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // non_labeled_closed_statement ::= procedure_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("non_labeled_closed_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_labeled_closed_statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // non_labeled_closed_statement ::= assignment_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("non_labeled_closed_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_labeled_closed_statement",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // closed_statement ::= non_labeled_closed_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("closed_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("closed_statement",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // closed_statement ::= label COLON non_labeled_closed_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("closed_statement", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("closed_statement",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // open_statement ::= non_labeled_open_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("open_statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("open_statement",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // open_statement ::= label COLON non_labeled_open_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("open_statement", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("open_statement",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // statement ::= closed_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // statement ::= open_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("statement", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // statement_sequence ::= error statement_sequence 
            {
              TSymbol RESULT = null;
		 System.err.println("Maybe you forgot a ';'."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // statement_sequence ::= statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("statement_sequence", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // statement_sequence ::= statement SEMICOLON statement_sequence 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("statement_sequence", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // compound_statement ::= BEGIN statement_sequence END 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("compound_statement", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // statement_part ::= compound_statement 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("statement_part", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_part",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // function_heading ::= FUNCTION IDENTIFIER formal_parameter_list COLON IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol e = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("function_heading", new TSymbol[]{a, b, c, d, e}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_heading",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // function_heading ::= FUNCTION IDENTIFIER COLON IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("function_heading", new TSymbol[]{a, b, c, d}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_heading",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // function_declaration ::= function_heading SEMICOLON block 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("function_declaration", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // variable_parameter_specification ::= VAR identifier_list COLON IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variable_parameter_specification", new TSymbol[]{a, b, c, d}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_parameter_specification",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // value_parameter_specification ::= identifier_list COLON IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("value_parameter_specification", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value_parameter_specification",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // formal_parameter_section ::= variable_parameter_specification 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("formal_parameter_section", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_section",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // formal_parameter_section ::= value_parameter_specification 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("formal_parameter_section", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_section",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // formal_parameter_section_list ::= formal_parameter_section 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("formal_parameter_section_list", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_section_list",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // formal_parameter_section_list ::= formal_parameter_section_list SEMICOLON formal_parameter_section 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("formal_parameter_section_list", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_section_list",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // formal_parameter_list ::= LPAREN formal_parameter_section_list RPAREN 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("formal_parameter_list", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // procedure_heading ::= PROCEDURE IDENTIFIER formal_parameter_list 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("procedure_heading", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // procedure_heading ::= PROCEDURE IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("procedure_heading", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // procedure_declaration ::= procedure_heading SEMICOLON block 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("procedure_declaration", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // proc_or_func_declaration ::= function_declaration 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("proc_or_func_declaration", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_or_func_declaration",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // proc_or_func_declaration ::= procedure_declaration 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("proc_or_func_declaration", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_or_func_declaration",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // proc_or_func_declaration_list ::= proc_or_func_declaration 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("proc_or_func_declaration_list", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_or_func_declaration_list",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // proc_or_func_declaration_list ::= proc_or_func_declaration_list SEMICOLON proc_or_func_declaration 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("proc_or_func_declaration_list", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_or_func_declaration_list",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // procedure_and_function_declaration_part ::= 
            {
              TSymbol RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_and_function_declaration_part",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // procedure_and_function_declaration_part ::= proc_or_func_declaration_list SEMICOLON 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("procedure_and_function_declaration_part", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_and_function_declaration_part",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // variable_declaration ::= identifier_list COLON type_denoter 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variable_declaration", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // variable_declaration_list ::= variable_declaration 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variable_declaration_list", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // variable_declaration_list ::= variable_declaration_list SEMICOLON variable_declaration 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variable_declaration_list", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // variable_declaration_part ::= 
            {
              TSymbol RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // variable_declaration_part ::= VAR variable_declaration_list error 
            {
              TSymbol RESULT = null;
		 System.err.println("Missing ';' in variable declaration part."); 
    parser.unrecoverableError = true;
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // variable_declaration_part ::= VAR variable_declaration_list SEMICOLON 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variable_declaration_part", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // new_pointer_type ::= UPARROW error 
            {
              TSymbol RESULT = null;
		 System.err.println("The uparrow means pointer, use it like that."); 
    parser.unrecoverableError = true;
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_pointer_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // new_pointer_type ::= UPARROW IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("new_pointer_type", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_pointer_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // file_type ::= FILE error 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad file type."); parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // file_type ::= FILE OF component_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("file_type", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // base_type ::= ordinal_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("base_type", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("base_type",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // set_type ::= SET error 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad set type."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // set_type ::= SET OF base_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("set_type", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // case_constant ::= constant DOTDOT constant 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("case_constant", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_constant",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // case_constant ::= constant 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("case_constant", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_constant",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // case_constant_list ::= case_constant 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("case_constant_list", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_constant_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // case_constant_list ::= case_constant_list COMMA case_constant 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("case_constant_list", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_constant_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // variant ::= case_constant_list COLON LPAREN variant_part RPAREN 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol e = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variant", new TSymbol[]{a, b, c, d, e}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // variant ::= case_constant_list COLON LPAREN record_section_list SEMICOLON variant_part RPAREN 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol e = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol f = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol g = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variant", new TSymbol[]{a, b, c, d, e, f, g}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // variant ::= case_constant_list COLON LPAREN record_section_list RPAREN 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol e = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variant", new TSymbol[]{a, b, c, d, e}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variant_list ::= variant 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variant_list", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variant_list ::= variant_list SEMICOLON variant 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variant_list", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // variant_selector ::= IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variant_selector", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant_selector",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // variant_selector ::= IDENTIFIER COLON IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variant_selector", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant_selector",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variant_part ::= 
            {
              TSymbol RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant_part",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variant_part ::= error 
            {
              TSymbol RESULT = null;
		 System.err.println("A problem with 'case'."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant_part",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variant_part ::= CASE variant_selector OF 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variant_part", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant_part",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variant_part ::= CASE variant_selector OF variant_list 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variant_part", new TSymbol[]{a, b, c, d}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant_part",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variant_part ::= CASE variant_selector OF variant_list SEMICOLON 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol e = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("variant_part", new TSymbol[]{a, b, c, d, e}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant_part",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // record_section ::= identifier_list COLON type_denoter 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("record_section", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_section",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // record_section_list ::= record_section 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("record_section_list", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_section_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // record_section_list ::= record_section_list SEMICOLON record_section 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("record_section_list", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_section_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // record_type ::= RECORD variant_part END 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("record_type", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // record_type ::= RECORD record_section_list SEMICOLON variant_part END 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol e = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("record_type", new TSymbol[]{a, b, c, d, e}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // record_type ::= RECORD record_section_list END 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("record_type", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // component_type ::= type_denoter 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("component_type", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component_type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ordinal_type ::= IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("ordinal_type", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordinal_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ordinal_type ::= new_ordinal_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("ordinal_type", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordinal_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // index_type ::= ordinal_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("index_type", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // index_list ::= index_list error index_type 
            {
              TSymbol RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // index_list ::= COMMA error 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad index list, maybe you forgot a type."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // index_list ::= index_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("index_list", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // index_list ::= index_list COMMA index_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("index_list", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // array_type ::= ARRAY LBRAC index_list RBRAC error 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad array type."); parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // array_type ::= ARRAY error index_list RBRAC OF component_type 
            {
              TSymbol RESULT = null;
		 System.err.println("'[' is probably missing."); parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // array_type ::= ARRAY LBRAC index_list OF component_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /* Evil hack */
 parser.syntax_error(new Symbol(sym.AND, a));
 System.err.println("']' is probably missing."); 
 parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // array_type ::= ARRAY LBRAC index_list RBRAC OF component_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol e = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol f = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("array_type", new TSymbol[]{a, b, c, d, e, f}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // structured_type ::= file_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("structured_type", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // structured_type ::= set_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("structured_type", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // structured_type ::= record_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("structured_type", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // structured_type ::= array_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("structured_type", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // new_structured_type ::= PACKED structured_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("new_structured_type", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_structured_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // new_structured_type ::= structured_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("new_structured_type", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_structured_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // subrange_type ::= error 
            {
              TSymbol RESULT = null;
		 System.err.println("Range should be '<number1> .. <number2>'."); 
   parser.unrecoverableError = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subrange_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // subrange_type ::= constant DOTDOT constant 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("subrange_type", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subrange_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // enumerated_type ::= LPAREN identifier_list RPAREN 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("enumerated_type", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enumerated_type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // new_ordinal_type ::= subrange_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("new_ordinal_type", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_ordinal_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // new_ordinal_type ::= enumerated_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("new_ordinal_type", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_ordinal_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // new_type ::= new_pointer_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("new_type", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // new_type ::= new_structured_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("new_type", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // new_type ::= new_ordinal_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("new_type", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_denoter ::= new_type 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("type_denoter", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_denoter",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_denoter ::= IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("type_denoter", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_denoter",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_definition ::= IDENTIFIER EQUAL type_denoter SEMICOLON 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("type_definition", new TSymbol[]{a, b, c, d}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_definition",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_definition_list ::= type_definition 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("type_definition_list", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_definition_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_definition_list ::= type_definition_list type_definition 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("type_definition_list", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_definition_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type_definition_part ::= 
            {
              TSymbol RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_definition_part",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_definition_part ::= TYPE type_definition_list 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("type_definition_part", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_definition_part",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constant_definition ::= IDENTIFIER EQUAL constant SEMICOLON 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("constant_definition", new TSymbol[]{a, b, c, d}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_definition",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constant_list ::= constant_definition 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("constant_list", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // constant_list ::= constant_list constant_definition 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("constant_list", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constant_definition_part ::= 
            {
              TSymbol RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constant_definition_part ::= CONST constant_list 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("constant_definition_part", new TSymbol[]{a, b}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // label ::= UINT 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("label", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("label",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // label_list ::= error 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad label list."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("label_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // label_list ::= label 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("label_list", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("label_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // label_list ::= label_list COMMA label 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("label_list", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("label_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // label_declaration_part ::= 
            {
              TSymbol RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // label_declaration_part ::= error 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad label declaration part."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // label_declaration_part ::= LABEL label_list SEMICOLON 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("label_declaration_part", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // block ::= error 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad block, please RTFM!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // block ::= label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part statement_part 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol e = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol f = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("block", new TSymbol[]{a, b, c, d, e, f}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identifier_list ::= error 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad identifier list - maybe you forgot another identifier around the ','."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // identifier_list ::= error IDENTIFIER 
            {
              TSymbol RESULT = null;
		 System.err.println("Bad identifier list - maybe you forgot a ','."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // identifier_list ::= IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("identifier_list", new TSymbol[]{a}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // identifier_list ::= identifier_list COMMA IDENTIFIER 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("identifier_list", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_heading ::= error 
            {
              TSymbol RESULT = null;
		 System.err.println("Warning: Bad or missing 'program' header.");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_heading",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_heading ::= PROGRAM IDENTIFIER LPAREN identifier_list RPAREN 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol e = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /* I could fake a ';' here. */
     RESULT = parser.buildTree("program_heading", new TSymbol[]{a, b, c, d, e});
     System.err.println("Warning: Missing ';' in 'program' header.");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_heading",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_heading ::= PROGRAM IDENTIFIER LPAREN identifier_list RPAREN SEMICOLON 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol d = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol e = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol f = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("program_heading", new TSymbol[]{a, b, c, d, e, f}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_heading",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_heading block optional_dot 
            {
              TSymbol RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TSymbol a = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol b = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TSymbol c = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.buildTree("program", new TSymbol[]{a, b, c}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TSymbol start_val = (TSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

